{"version":3,"sources":["../../../../src/backend/server/signaling-server/signaling-server.ts"],"names":["async","require","util","EventEmitter","errors","logger","BROADCASTMESSAGE","ENTER_ROOM","LEAVE_ROOM","NEGOTIATION_MESSAGE","OFFER","ANSWER","CANDIDATE","SUCESS_NEGOTIATION","FAILED_NEGOTIATION","ROOM_MESSANGE","FAILED_ENTER_ROOM","SESSION_MESSAGE","LOGIN","LOGOUT","ERR_MESSAGE","INVALIDMESSAGE","INVALIDUSER","SERVER_ERR","SignalingServer","wss","callback","_start","info","Error","self","on","connection","emit","message","parsedMessage","waterfall","asyncCallBack","parsingMessage","mParsedMessage","isInvalidMessage","whatType","type","handleSessionMessage","handleMessage","e","sendErrMessage","closeConnection","data","JSON","parse","error","InvalidMessageError","userModule","createUser","fromUserID","err","success","send","stringify","deleteUser","roomID","toUserID","sdp","candidate","roomModule","isRoom","enterRoom","enteredRoom","createRoom","createdRoom","toString","sendTo","broadcastMessage","from","userID","broadcast","leaveRoom","rooms","findUserFromConnection","isUser","closeConnectionWithUserID","isInRoom","mType","splitVar","split"],"mappings":"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","sourcesContent":["var async = require('async');\r\nvar util = require('util');\r\nvar EventEmitter = require('events').EventEmitter;\r\nimport ws from 'ws'\r\nimport * as userModule from './user'\r\nimport * as roomModule  from './room'\r\nvar errors = require('./errors')\r\nvar logger =require('../../logger').logger\r\n\r\nconst BROADCASTMESSAGE ={\r\n  ENTER_ROOM:\"broadcast:enterRoom\",\r\n  LEAVE_ROOM:\"broadcast:leaveRoom\"\r\n}\r\n\r\nconst NEGOTIATION_MESSAGE ={\r\n  OFFER:\"negotiation:offer\",\r\n  ANSWER:\"negotiation:answer\",\r\n  CANDIDATE:\"negotiation:candidate\",\r\n  SUCESS_NEGOTIATION:\"negotiation:sucess\",\r\n  FAILED_NEGOTIATION:\"negotiation:failed\"\r\n}\r\n\r\nconst ROOM_MESSANGE ={\r\n  ENTER_ROOM:\"room:enterRoom\",\r\n  FAILED_ENTER_ROOM:\"room:failedEnterRoom\",\r\n  LEAVE_ROOM:\"room:leaveRoom\",\r\n}\r\n\r\nconst SESSION_MESSAGE ={\r\n  LOGIN: \"session:login\",\r\n  LOGOUT: \"session:logout\"\r\n}\r\n\r\nconst ERR_MESSAGE ={\r\n  INVALIDMESSAGE: \"err:invalidMessage\",\r\n  INVALIDUSER: \"err:invalidUser\",\r\n  SERVER_ERR:\"err:serverError\"\r\n}\r\n\r\ninterface SignalMessage{\r\n  type:string\r\n}\r\n\r\nclass SignalingServer extends EventEmitter{\r\n  \r\n  wss:ws\r\n\r\n  constructor(){\r\n    super()\r\n  }\r\n\r\n  init(wss:ws,callback:any){\r\n\r\n    if(wss){\r\n\r\n        this.wss = wss\r\n\r\n        this._start()\r\n\r\n        logger.info(\"signaling server successfully inited\")\r\n\r\n        callback(null)\r\n\r\n    }else{\r\n        callback(new Error(\"wss cant not be null\"))\r\n    }\r\n  }\r\n\r\n  _start(){\r\n\r\n      var self = this\r\n\r\n      self.wss.on('connection', function(connection:any) {\r\n          \r\n          logger.info(\"[SignalServer] user connected\" );\r\n\r\n          self.emit('connection',connection)\r\n      \r\n          connection.on('message', function(message:any) { \r\n        \r\n            logger.info(\"got message\",message )  \r\n\r\n            var parsedMessage:SignalMessage\r\n\r\n            async.waterfall([\r\n              function(asyncCallBack:any){\r\n                self.parsingMessage(message,asyncCallBack);\r\n                  \r\n              },\r\n              function(mParsedMessage:any,asyncCallBack:any){\r\n        \r\n                parsedMessage = mParsedMessage;\r\n        \r\n                logger.info(\"parsedMessage :\",parsedMessage)\r\n        \r\n                self.isInvalidMessage(parsedMessage,asyncCallBack)\r\n        \r\n              },\r\n              function(asyncCallBack:any){\r\n        \r\n                if(self.whatType(parsedMessage.type) ===\"session\"){\r\n          \r\n                  self.handleSessionMessage(parsedMessage,connection,asyncCallBack)\r\n        \r\n                }else{\r\n          \r\n                  self.handleMessage(parsedMessage,asyncCallBack)\r\n                }\r\n          \r\n              }\r\n          \r\n              ],function(e:any){\r\n                if(e){\r\n\r\n                  e.sendErrMessage(connection)\r\n\r\n                }\r\n                \r\n              })\r\n            }); \r\n            \r\n          connection.on(\"close\", function() { \r\n            if(connection!=null){\r\n              self.closeConnection(connection)\r\n            }\r\n          })    \r\n      })\r\n  }\r\n\r\n  parsingMessage(message:any,callback:any){\r\n\r\n    var data; \r\n    \r\n    try { \r\n        data = JSON.parse(message); \r\n\r\n    } catch (e) { \r\n        logger.error(\"Invalid JSON e:\",e); \r\n        \r\n        return callback(new errors.InvalidMessageError(\"Invalid JSON\"))\r\n    }\r\n\r\n    return callback(null,data)\r\n  }\r\n\r\n  handleSessionMessage(parsedMessage:any,connection:any,callback:any){\r\n    \r\n    var self = this\r\n\r\n    var data = parsedMessage\r\n    \r\n    switch (data.type) {\r\n      case SESSION_MESSAGE.LOGIN:\r\n\r\n        \r\n        userModule.createUser(data.fromUserID,connection,(err:any,success:Boolean)=>{\r\n\r\n          if(err){\r\n\r\n            return err.sendErrMessage(connection)\r\n          }\r\n\r\n          var message = {\r\n            type: SESSION_MESSAGE.LOGIN,\r\n            success: success\r\n          }\r\n\r\n          logger.info(\"successfully login \",data.fromUserID)\r\n\r\n          connection.send(JSON.stringify(message));\r\n\r\n          self.emit()\r\n        });\r\n\r\n      break;\r\n      case SESSION_MESSAGE.LOGOUT:\r\n              \r\n        logger.info(data.fromUserID ,\" logout\");\r\n        \r\n        userModule.deleteUser(data.fromUserID)\r\n\r\n        var message ={\r\n        \r\n          type: SESSION_MESSAGE.LOGOUT,\r\n          fromUserID: data.fromUserID,\r\n          success: true\r\n        };\r\n\r\n        connection.send(JSON.stringify(message));\r\n        \r\n        self.emit() //TODO: emit what?\r\n\r\n      break;\r\n    }\r\n\r\n    callback(null)\r\n    \r\n  }\r\n\r\n  isInvalidMessage(parsedMessage:any,callback:any){\r\n    \r\n    var data = parsedMessage\r\n\r\n    if(!data.type){\r\n      \r\n      return callback(new errors.InvalidMessageError(\"type undefiend\"))\r\n    } \r\n\r\n    switch (data.type) {\r\n\r\n      case SESSION_MESSAGE.LOGIN:\r\n        if(!data.fromUserID){\r\n\r\n          return callback(new errors.InvalidMessageError(\"fromUserID undefiend\"))\r\n\r\n        }\r\n\r\n      break\r\n\r\n      case SESSION_MESSAGE.LOGOUT:\r\n        if(!data.fromUserID){\r\n\r\n          return callback(new errors.InvalidMessageError(\"fromUserID undefiend\"))\r\n\r\n        }\r\n\r\n      break\r\n\r\n      case ROOM_MESSANGE.ENTER_ROOM:\r\n        if(!data.fromUserID || !data.roomID){\r\n\r\n          return callback(new errors.InvalidMessageError(\"fromUserID or roomID undefiend\"))\r\n\r\n        }\r\n\r\n      break\r\n\r\n      case ROOM_MESSANGE.LEAVE_ROOM:\r\n\r\n        if(!data.fromUserID || !data.roomID){\r\n\r\n          return callback(new errors.InvalidMessageError(\"fromUserID or roomID undefiend\"))\r\n\r\n        }\r\n\r\n      break\r\n\r\n      case NEGOTIATION_MESSAGE.OFFER:\r\n\r\n        if(!data.fromUserID || !data.toUserID || !data.sdp){\r\n\r\n          return callback(new errors.InvalidMessageError(\"fromUserID or toUserID or offer undefiend\"))\r\n\r\n        }\r\n\r\n      break\r\n\r\n      case NEGOTIATION_MESSAGE.ANSWER:\r\n\r\n        if(!data.fromUserID || !data.toUserID|| !data.sdp){\r\n\r\n          return callback(new errors.InvalidMessageError(\"fromUserID or toUserID or answer undefiend\"))\r\n\r\n        }\r\n\r\n      break;\r\n\r\n      case NEGOTIATION_MESSAGE.CANDIDATE:\r\n\r\n      if(!data.fromUserID || !data.candidate || !data.toUserID){\r\n\r\n        return callback(new errors.InvalidMessageError(\"fromUserID or toUserID or candidate undefiend\"))\r\n\r\n      }\r\n\r\n      break;\r\n\r\n      default:\r\n\r\n        return callback(new errors.InvalidMessageError(\"invalid Type type: \" +data.type))\r\n\r\n      break;\r\n\r\n    }\r\n      \r\n    return callback(null)\r\n    \r\n  }\r\n\r\n  handleMessage(parsedMessage:any,callback:any){\r\n\r\n    var self =this\r\n\r\n    var data = parsedMessage;\r\n\r\n    switch (data.type) {\r\n      \r\n      case ROOM_MESSANGE.ENTER_ROOM: \r\n          \r\n        logger.info(\"enter room\",data.fromUserID ,data.roomID)\r\n\r\n        async.waterfall([\r\n          function(asyncCallBack:any){\r\n            roomModule.isRoom(data.roomID,asyncCallBack)\r\n\r\n          },\r\n          function(isRoom:Boolean,asyncCallBack:any){\r\n              if(isRoom){\r\n                logger.info(\"enterRoom\")\r\n\r\n                roomModule.enterRoom(data.roomID,data.fromUserID,(err:Error,enteredRoom:any)=>{\r\n                  if(err){\r\n\r\n                    asyncCallBack(err);\r\n\r\n                  }else{\r\n                    self.emit('enterRoom',data.roomID,enteredRoom,data.fromUserID);  \r\n                    asyncCallBack(null);\r\n\r\n                  }\r\n      \r\n                });\r\n\r\n              }else{\r\n\r\n                \r\n                logger.info(\"createRoom(\"+ data.roomID+\")\")\r\n\r\n                roomModule.createRoom(data.roomID,data.fromUserID,(err:Error,createdRoom:any)=>{\r\n                  \r\n                  if(err){\r\n                    asyncCallBack(err)\r\n                  }else{\r\n                    self.emit('createRoom',data.roomID,createdRoom,data.fromUserID);\r\n                    asyncCallBack(null)\r\n                  }\r\n\r\n                })\r\n              }\r\n\r\n          }],function(err:Error){\r\n            if(err){\r\n\r\n              logger.error(err.toString())\r\n\r\n              callback(err)\r\n              \r\n            }else{\r\n\r\n              var message ={\r\n\r\n                // from:data.fromUserID,\r\n                type: ROOM_MESSANGE.ENTER_ROOM,\r\n                success: true\r\n              }\r\n\r\n              userModule.sendTo(data.fromUserID,message);\r\n\r\n              var broadcastMessage ={\r\n\r\n                from:data.fromUserID,\r\n                type: BROADCASTMESSAGE.ENTER_ROOM,\r\n                userID: data.fromUserID,\r\n              }\r\n\r\n              roomModule.broadcast(data.fromUserID,data.roomID,broadcastMessage,(err:Error)=>{\r\n                \r\n                if(err){\r\n                  //TODO: errHandle\r\n                }\r\n\r\n              })\r\n\r\n              \r\n              callback(null)\r\n              \r\n            }\r\n          }\r\n        )\r\n        \r\n            \r\n      break;\r\n      case ROOM_MESSANGE.LEAVE_ROOM: \r\n      \r\n        logger.info(data.fromUserID ,\" leave from\",data.roomID);\r\n        \r\n        roomModule.leaveRoom(data.fromUserID,data.roomID,(err:Error)=>{\r\n\r\n          if(err){\r\n            //can not be err\r\n          }\r\n\r\n          self.emit('leaveRoom',data.roomID,roomModule.rooms[data.roomID]);\r\n\r\n          var message={\r\n\r\n            fromUserID: data.fromUserID,\r\n            type: ROOM_MESSANGE.LEAVE_ROOM,\r\n\r\n          }\r\n\r\n          userModule.sendTo(data.fromUserID,message);\r\n\r\n          var broadcastMessage={\r\n            userID: data.fromUserID,\r\n            type: BROADCASTMESSAGE.LEAVE_ROOM\r\n          }\r\n\r\n          if(roomModule.rooms[data.roomID]){\r\n\r\n            roomModule.broadcast(data.fromUserID,data.roomID,broadcastMessage,(err:Error)=>{\r\n              if(err){\r\n                \r\n                callback(err)\r\n              }\r\n              \r\n            });\r\n\r\n          }\r\n          \r\n          callback(null)\r\n\r\n        });\r\n      \r\n      break;\r\n\r\n      case NEGOTIATION_MESSAGE.OFFER:\r\n    \r\n        logger.info(\"Sending offer from \", data.fromUserID,\"to \",data.toUserID);\r\n      \r\n        userModule.sendTo(data.toUserID, { \r\n          fromUserID: data.fromUserID,\r\n          type: NEGOTIATION_MESSAGE.OFFER, \r\n          sdp: data.sdp, \r\n          toUserID: data.toUserID\r\n        }); \r\n\r\n        // self.emit();  \r\n        callback(null)\r\n\r\n      break;\r\n\r\n      case NEGOTIATION_MESSAGE.ANSWER: \r\n\r\n        logger.info(\"Sending answer from \",data.fromUserID ,\" to \",data.toUserID); \r\n\r\n        userModule.sendTo(data.toUserID, { \r\n          fromUserID: data.fromUserID,\r\n          type: NEGOTIATION_MESSAGE.ANSWER, \r\n          sdp: data.sdp, \r\n          toUserID: data.toUserID\r\n        }); \r\n\r\n        // self.emit();\r\n        callback(null)\r\n\r\n      break; \r\n      \r\n      case NEGOTIATION_MESSAGE.CANDIDATE: \r\n        \r\n        logger.info(\"Sending candidate from\",data.fromUserID,\" to \", data.toUserID); \r\n\r\n        userModule.sendTo(data.toUserID, { \r\n          fromUserID: data.fromUserID,\r\n          type: NEGOTIATION_MESSAGE.CANDIDATE, \r\n          candidate: data.candidate, \r\n          toUserID: data.toUserID\r\n        }); \r\n\r\n        // self.emit();\r\n        callback(null)\r\n        \r\n      break;\r\n\r\n      default: \r\n\r\n        logger.error(\"send Invalide Message err to \",data.fromUserID )\r\n        userModule.sendTo(data.fromUserID, { \r\n            type: ERR_MESSAGE.INVALIDMESSAGE, \r\n            message: \"sending Invalid Message type:\" + data.type \r\n          }); \r\n        callback(null)\r\n      \r\n      break; \r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  closeConnection(connection:any){\r\n\r\n    logger.info(\"ws client connection close\")\r\n\r\n    var self = this;\r\n    \r\n    userModule.findUserFromConnection(connection,(err:Error,isUser:Boolean,userID:string)=>{\r\n      \r\n      if(err){\r\n        logger.error(err)  //err shuld not be happen\r\n      }\r\n\r\n      if(isUser){\r\n\r\n        self.closeConnectionWithUserID(userID)\r\n\r\n      }\r\n    })\r\n\r\n    \r\n  }\r\n\r\n  closeConnectionWithUserID(userID:string){\r\n\r\n    logger.info('ws client connection close userID:' + userID)\r\n\r\n    var self = this\r\n    \r\n    userModule.isInRoom(userID,(err:Error,isRoom:Boolean,roomID:string)=>{\r\n\r\n      if(err){\r\n        logger.error(err)\r\n        throw err\r\n      }\r\n\r\n      if(isRoom){\r\n\r\n        logger.info(userID ,\"leaveRoom from \" ,roomID)\r\n\r\n        roomModule.leaveRoom(userID,roomID,(err:Error)=>{\r\n          \r\n          if(err){\r\n            logger.error(err)             // this err never happen. if this happen, server have to die\r\n            throw err\r\n          }else{\r\n\r\n            self.emit(\"leaveRoom\",roomID,roomModule.rooms[roomID],userID)\r\n\r\n            if(roomModule.rooms[roomID]){\r\n\r\n              var broadcastMessage={\r\n                userID: userID,\r\n                type: BROADCASTMESSAGE.LEAVE_ROOM\r\n              }\r\n\r\n              roomModule.broadcast(userID,roomID,broadcastMessage,(err:Error)=>{\r\n                if(err){\r\n                  logger.error(err);\r\n                  throw err\r\n                }\r\n              \r\n              });\r\n\r\n            }\r\n          }\r\n        })\r\n      }\r\n    });\r\n\r\n    userModule.deleteUser(userID)\r\n\r\n  }\r\n\r\n  whatType(type:string){\r\n\r\n    var mType \r\n\r\n    var splitVar =type.split(\":\")\r\n    \r\n    mType =splitVar[0]\r\n\r\n    return mType\r\n    \r\n  }\r\n}\r\n\r\nexport {SignalingServer}"],"file":"signaling-server.js"}