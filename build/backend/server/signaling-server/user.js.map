{"version":3,"sources":["../../../../src/backend/server/signaling-server/user.ts"],"names":["errors","require","users","USER_STATUS","INROOM","ONLINE","createUser","userID","connection","callback","InvalidMessageError","ServerError","status","deleteUser","sendTo","message","send","JSON","stringify","authenticate","findUserFromConnection","conn","isInRoom","roomID","broadcast","userIDs","forEach","getUserNum","Object","keys","length","getConnection"],"mappings":"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","sourcesContent":["var errors =require('./errors')\r\n/**\r\n * websocket에 접속되어 있는 user 관리 하는 모듈 \r\n */\r\n\r\ninterface User{\r\n    userID:string\r\n    connection:any\r\n    status:string\r\n    roomID?:string\r\n}\r\n\r\nvar users :{[key:string]:User}={}   \r\n\r\nconst USER_STATUS={\r\n    INROOM : 'inroom',   \r\n    ONLINE :'online'\r\n}\r\n\r\nexport {\r\n    users,\r\n    USER_STATUS,\r\n    User\r\n};\r\n\r\n\r\n/**\r\n * \r\n * @param {string} userID \r\n * @param {Object} connection -websocket 커넥션 객체 \r\n * @param {function}} callback \r\n */\r\nexport function createUser(userID:string,connection:{},callback:any){\r\n\r\n    if(!userID){\r\n        callback(new errors.InvalidMessageError('userID can not be null'));\r\n    }\r\n\r\n    if(!connection){\r\n        callback(new errors.ServerError('connection can not be null'))\r\n    }\r\n    if(!users[userID]){\r\n        users[userID] ={\r\n            userID:userID,\r\n            connection:connection,\r\n            status:USER_STATUS.ONLINE\r\n        };\r\n        return callback(null,true);\r\n\r\n    }else{\r\n        \r\n        return callback(null,false); \r\n    }\r\n\r\n}\r\n/**\r\n * \r\n * @param {string} userID \r\n * @param {function} callback \r\n */\r\nexport function deleteUser(userID:string){\r\n    \r\n    delete users[userID];\r\n    \r\n}\r\n\r\n/**\r\n * \r\n * @param {string} userID \r\n * @param {Object} message \r\n * @param {function} callback \r\n */\r\nexport function sendTo(userID:string, message:{}) { \r\n\r\n    if(!userID){\r\n        throw new errors.InvalidMessageError(\"userID can not be null\")\r\n    }\r\n\r\n    if(!users[userID]){\r\n        throw new errors.InvalidMessageError(\"connection is not avaliavle userID:\"+ userID)\r\n    }\r\n\r\n    \r\n    users[userID].connection.send(JSON.stringify(message));\r\n\r\n    \r\n}\r\n\r\n/**\r\n * 유저가 접속되어 있는지 접속되어 있지 않는지 확인해주는 function(중복 접속 금지)\r\n * @param {String} userID \r\n * @returns {Boolean} \r\n */\r\nexport function authenticate(userID:string){\r\n\r\n    if(users[userID]){ \r\n        \r\n        return true;\r\n\r\n    }else{\r\n        \r\n        return false;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * websocket connection으로부터 user를 찾아주는 function\r\n * @param {any} conn \r\n * @param {function} callback \r\n */\r\nexport function findUserFromConnection(conn:any,callback:any){\r\n\r\n\r\n    if(!conn){\r\n        return callback(new errors.InvalidMessageError(\"connection can not be null\"));\r\n    }\r\n\r\n    for(var userID in users){\r\n        if(users[userID].connection ===conn){\r\n\r\n            return callback(null,true,userID)\r\n        }\r\n    }\r\n\r\n    return callback(null,false,null)\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {string} userID \r\n * @param {function} callback \r\n */\r\nexport function isInRoom(userID:string,callback:any){\r\n    \r\n    if(!userID){\r\n        return callback(new errors.InvalidMessageError(\"usernaem can not be null\"));\r\n    }\r\n    \r\n    if(users[userID].status ===USER_STATUS.INROOM){\r\n\r\n        return callback(null,true,users[userID].roomID);\r\n\r\n    }else{\r\n\r\n        return callback(null,false,null);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * 불특정 유저에게 브로드케스트 메시지를 보내는 function\r\n * @param {string[]} userIDs \r\n * @param {string} message \r\n */\r\nexport function broadcast(userIDs:[],message:string){\r\n\r\n    userIDs.forEach(userID => {\r\n        users[userID].connection.send(JSON.stringify(message))\r\n    });\r\n}\r\n\r\nexport function getUserNum(){\r\n\r\n    return Object.keys(users).length\r\n}\r\n\r\nexport function getConnection(userID:string,callback:any){\r\n    if(!userID){\r\n        \r\n        callback(new errors.ServerError(\"userID can not be null\"))\r\n    \r\n    }else{\r\n        if(users[userID].connection){\r\n            callback(null, users[userID].connection)\r\n        }else{\r\n            callback(null,false)\r\n        }\r\n\r\n    }\r\n}\r\n"],"file":"user.js"}