{"version":3,"sources":["../../../../src/backend/server/signaling-server/user.js"],"names":["errors","require","users","USER_STATUS","INROOM","ONLINE","module","exports","createUser","userID","connection","callback","InvalidMessageError","ServerError","status","deleteUser","sendTo","message","send","JSON","stringify","e","authenticate","findUserFromConnection","conn","isInRoom","roomID","broadcast","userIDs","array","forEach","getUserNum","Object","keys","length","getConnection","callbak"],"mappings":"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","sourcesContent":["var errors =require('./errors')\r\n/**\r\n * websocket에 접속되어 있는 user 관리 하는 모듈 \r\n */\r\n\r\nvar users ={};  \r\n\r\nconst USER_STATUS={\r\n    INROOM : 'inroom',   \r\n    ONLINE :'online'\r\n}\r\n\r\nmodule.exports.users = users;\r\nmodule.exports.USER_STATUS=USER_STATUS;\r\n\r\n/**\r\n * \r\n * @param {String} userID \r\n * @param {Object} connection -websocket 커넥션 객체 \r\n * @param {function}} callback \r\n */\r\nmodule.exports.createUser =function(userID,connection,callback){\r\n\r\n    if(!userID){\r\n        callback(new errors.InvalidMessageError('userID can not be null'));\r\n    }\r\n\r\n    if(!connection){\r\n        callback(new errors.ServerError('connection can not be null'))\r\n    }\r\n    if(!users[userID]){\r\n        users[userID] ={\r\n            userID:userID,\r\n            connection:connection,\r\n            status:USER_STATUS.ONLINE\r\n        };\r\n        return callback(null,true);\r\n\r\n    }else{\r\n        \r\n        return callback(null,false); \r\n    }\r\n\r\n}\r\n/**\r\n * \r\n * @param {String} userID \r\n * @param {function} callback \r\n */\r\nmodule.exports.deleteUser = function(userID){\r\n    \r\n    delete users[userID];\r\n    \r\n}\r\n\r\n/**\r\n * \r\n * @param {String} userID \r\n * @param {String} message \r\n * @param {function} callback \r\n */\r\nmodule.exports.sendTo = function (userID, message,callback) { \r\n\r\n    if(!userID){\r\n        return callback(new errors.InvalidMessageError(\"userID can not be null\"));\r\n    }\r\n\r\n    if(!users[userID]){\r\n        return callback(new errors.InvalidMessageError(\"connection is not avaliavle userID:\"+ userID));\r\n    }\r\n\r\n    try{\r\n        users[userID].connection.send(JSON.stringify(message));\r\n\r\n    }catch(e){\r\n\r\n       return callback(e)\r\n    \r\n    }\r\n}\r\n\r\n/**\r\n * 유저가 접속되어 있는지 접속되어 있지 않는지 확인해주는 function(중복 접속 금지)\r\n * @param {String} userID \r\n * @returns {Boolean} \r\n */\r\nmodule.exports.authenticate = function(userID){\r\n\r\n    if(users[userID]){ \r\n        \r\n        return true;\r\n\r\n    }else{\r\n        \r\n        return false;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * websocket connection으로부터 user를 찾아주는 function\r\n * @param {String} conn \r\n * @param {function} callback \r\n */\r\nmodule.exports.findUserFromConnection = function(conn,callback){\r\n\r\n\r\n    if(!conn){\r\n        return callback(new errors.InvalidMessageError(\"connection can not be null\"));\r\n    }\r\n\r\n    for(var userID in users){\r\n        if(users[userID].connection ===conn){\r\n\r\n            return callback(null,true,userID)\r\n        }\r\n    }\r\n\r\n    return callback(null,false,null)\r\n}\r\n\r\n\r\n/**\r\n * \r\n * @param {String} userID \r\n * @param {function} callback \r\n */\r\nmodule.exports.isInRoom = function(userID,callback){\r\n    \r\n    if(!userID){\r\n        return callback(new errors.InvalidMessageError(\"usernaem can not be null\"));\r\n    }\r\n    \r\n    if(users[userID].status ===USER_STATUS.INROOM){\r\n\r\n        return callback(null,true,users[userID].roomID);\r\n\r\n    }else{\r\n\r\n        return callback(null,false,null);\r\n    }\r\n    \r\n}\r\n\r\n/**\r\n * 불특정 유저에게 브로드케스트 메시지를 보내는 function\r\n * @param {String[]} userIDs \r\n * @param {String} message \r\n */\r\nmodule.exports.broadcast = function(userIDs,message){\r\n\r\n    userIDs.array.forEach(userID => {\r\n        users[userID].connection.send(JSON.stringify(message))\r\n    });\r\n}\r\n\r\nmodule.exports.getUserNum = function(){\r\n\r\n    return Object.keys(users).length\r\n}\r\n\r\nmodule.exports.getConnection= function(userID,callback){\r\n    if(!userID){\r\n        \r\n        callback(new errors.ServerError(\"userID can not be null\"))\r\n    \r\n    }else{\r\n        if(users[userID].connection){\r\n            callback(null, users[userID].connection)\r\n        }else{\r\n            callbak(null,false)\r\n        }\r\n\r\n    }\r\n}\r\n"],"file":"user.js"}