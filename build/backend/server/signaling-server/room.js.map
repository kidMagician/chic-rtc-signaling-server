{"version":3,"sources":["../../../../src/backend/server/signaling-server/room.ts"],"names":["ROOM_AVAILABLE_USER_NUM","require","MAX_ROOM_NAME_LENGTH","MIN_ROOM_NAME_LENGTH","errors","rooms","isRoom","roomID","callback","InvalidMessageError","createRoom","userID","user","users","status","USER_STATUS","INROOM","InvalidUserError","room","deleteRoom","enterRoom","leaveRoom","ONLINE","Object","keys","length","err","checkfull","broadcast","from_userID","message","sendTo"],"mappings":";;;;;;;;;;;;;;;AAeA,sD,ulCAdA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,uBAArD,CACA,IAAIE,oBAAoB,GAAED,OAAO,CAAC,aAAD,CAAP,CAAuBC,oBAAjD,CACA,IAAIC,oBAAoB,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,oBAAlD,CACA,IAAIC,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB,CAOA,IAAII,KAA0B,GAAE,EAAhC,C;;AAMA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACO,SAASC,MAAT,CAAgBC,MAAhB,EAA8BC,QAA9B,EAA2C;;AAE9C,MAAG,CAACD,MAAJ,EAAW;AACP,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,wBAA/B,CAAD,CAAf;AACH;;AAED,MAAG,CAACJ,KAAK,CAACE,MAAD,CAAT,EAAkB;AACdC,IAAAA,QAAQ,CAAC,IAAD,EAAM,KAAN,CAAR;AACH,GAFD,MAEK;AACD,WAAOA,QAAQ,CAAC,IAAD,EAAM,IAAN,CAAf;AACH;;AAEJ;;AAED;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,UAAT,CAAoBH,MAApB,EAAkCI,MAAlC,EAAgDH,QAAhD,EAA6D;;AAEhE;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,MAAG,CAACD,MAAJ,EAAW;;AAEP,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,yBAA/B,CAAD,CAAf;AACH;;AAED,MAAGG,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAH,EAAsB;;AAElBC,IAAAA,IAAI,CAACC,KAAL,CAAWF,MAAX,EAAmBG,MAAnB,GAA4BF,IAAI,CAACG,WAAL,CAAiBC,MAA7C;AACAJ,IAAAA,IAAI,CAACC,KAAL,CAAWF,MAAX,EAAmBJ,MAAnB,GAA4BA,MAA5B;;AAEA,QAAIM,KAAU,GAAE,EAAhB;;AAEAA,IAAAA,KAAK,CAACF,MAAD,CAAL,GAAeC,IAAI,CAACC,KAAL,CAAWF,MAAX,CAAf;;AAEAN,IAAAA,KAAK,CAACE,MAAD,CAAL,GAAgB;AACZA,MAAAA,MAAM,EAACA,MADK;AAEZM,MAAAA,KAAK,EAACA,KAFM,EAAhB;;;AAKH,GAdD,MAcK;AACD,WAAOL,QAAQ,CAAC,IAAIJ,MAAM,CAACa,gBAAX,CAA4BN,MAAM,GAAC,+CAAnC,CAAD,CAAf;AACH;;AAED,MAAIO,IAAI,GAAGb,KAAK,CAACE,MAAD,CAAhB;;AAEA,SAAOC,QAAQ,CAAC,IAAD,EAAMU,IAAN,CAAf;;AAEH;AACD;AACA;AACA;AACA;AACA;AACC,SAASC,UAAT,CAAoBZ,MAApB,EAAkCC,QAAlC,EAA+C;;AAE5C,MAAG,CAACD,MAAJ,EAAW;;AAEP,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,wBAA/B,CAAD,CAAf;AACH;;AAED,SAAOJ,KAAK,CAACE,MAAD,CAAZ;;AAEA,SAAOC,QAAQ,CAAC,IAAD,CAAf;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASY,SAAT,CAAmBb,MAAnB,EAAiCI,MAAjC,EAAgDH,QAAhD,EAA6D;;AAEhE,MAAG,CAACD,MAAJ,EAAW;AACP,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,2BAA/B,CAAD,CAAf;AACH;;AAED,MAAG,CAACE,MAAJ,EAAW;AACP,WAAOH,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,yBAA/B,CAAD,CAAf;AACH;;AAED,MAAG,CAACJ,KAAK,CAACE,MAAD,CAAT,EAAkB;AACd,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,qCAAmCF,MAAlE,CAAD,CAAf,CADc,CAC8E;AAC/F;;AAED,MAAG,CAACF,KAAK,CAACE,MAAD,CAAL,CAAcM,KAAd,CAAoBF,MAApB,CAAJ,EAAgC;;AAE5BC,IAAAA,IAAI,CAACC,KAAL,CAAWF,MAAX,EAAmBG,MAAnB,GAA4BF,IAAI,CAACG,WAAL,CAAiBC,MAA7C;AACAJ,IAAAA,IAAI,CAACC,KAAL,CAAWF,MAAX,EAAmBJ,MAAnB,GAA4BA,MAA5B;;AAEAF,IAAAA,KAAK,CAACE,MAAD,CAAL,CAAcM,KAAd,CAAoBF,MAApB,IAA6BC,IAAI,CAACC,KAAL,CAAWF,MAAX,CAA7B;;AAEA,WAAOH,QAAQ,CAAC,IAAD,EAAMH,KAAK,CAACE,MAAD,CAAX,CAAf;;AAEH,GATD,MASK;;AAED,WAAOC,QAAQ;AACX,QAAIJ,MAAM,CAACK,mBAAX;AACI;AACC,cADD,GACaE,MADb,GACsB,IADtB;AAEC,cAFD,GAEaJ,MAHjB,CADW,CAAf;;;AAOH;;AAEJ;;AAED;AACA;AACA;AACA;AACA;AACA;AACO,SAASc,SAAT,CAAmBV,MAAnB,EAAiCJ,MAAjC,EAA+CC,QAA/C,EAA4D;;AAE/D,MAAG,CAACD,MAAJ,EAAW;AACP,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,2BAA/B,CAAD,CAAf;AACH;;AAED,MAAG,CAACE,MAAJ,EAAW;AACP,WAAOH,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,wBAA/B,CAAD,CAAf;AACH;;AAED,MAAIJ,KAAK,CAACE,MAAD,CAAL,CAAcM,KAAd,CAAoBF,MAApB,CAAJ,EAAiC;;AAE7BN,IAAAA,KAAK,CAACE,MAAD,CAAL,CAAcM,KAAd,CAAoBF,MAApB,EAA4BG,MAA5B,GAAqCF,IAAI,CAACG,WAAL,CAAiBO,MAAtD;AACAjB,IAAAA,KAAK,CAACE,MAAD,CAAL,CAAcM,KAAd,CAAoBF,MAApB,EAA4BJ,MAA5B,GAAqC,IAArC;AACA,WAAOF,KAAK,CAACE,MAAD,CAAL,CAAcM,KAAd,CAAoBF,MAApB,CAAP;;AAEA,QAAGY,MAAM,CAACC,IAAP,CAAYnB,KAAK,CAACE,MAAD,CAAL,CAAcM,KAA1B,EAAiCY,MAAjC,IAAyC,CAA5C,EAA8C;AAC1CN,MAAAA,UAAU,CAACZ,MAAD,EAAQ,UAACmB,GAAD,EAAa;;AAE3B,YAAGA,GAAH,EAAO;AACH,iBAAOlB,QAAQ,CAACkB,GAAD,CAAf;AACH;AACJ,OALS,CAAV;AAMH;;AAEJ;;AAED,SAAOlB,QAAQ,CAAC,IAAD,CAAf;;;AAGH;;AAED;AACA;AACA;AACA;AACA;AACO,SAASmB,SAAT,CAAmBpB,MAAnB,EAAiCC,QAAjC,EAA8C;;AAEjD,MAAG,CAACD,MAAJ,EAAW;AACP,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,yBAA/B,CAAD,CAAf;AACH;;AAED,MAAGF,MAAM,CAACkB,MAAP,IAAiBzB,uBAApB,EAA4C;AACxC,WAAOQ,QAAQ,CAAC,IAAD,EAAM,IAAN,CAAf;AACH,GAFD,MAEK;AACD,WAAOA,QAAQ,CAAC,IAAD,EAAM,KAAN,CAAf;AACH;;AAEJ;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASoB,SAAT,CAAmBC,WAAnB,EAAsCtB,MAAtC,EAAoDuB,OAApD,EAAmEtB,QAAnE,EAAgF;;AAEnF,MAAG,CAACqB,WAAJ,EAAgB;AACZ,WAAOrB,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,wBAA/B,CAAD,CAAf;AACH;;AAED,MAAG,CAACF,MAAJ,EAAW;AACP,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,wBAA/B,CAAD,CAAf;AACH;;AAED,MAAG,CAACJ,KAAK,CAACE,MAAD,CAAT,EAAkB;AACd,WAAOC,QAAQ,CAAC,IAAIJ,MAAM,CAACK,mBAAX,CAA+B,uBAA/B,CAAD,CAAf;AACH;;AAED,OAAI,IAAIE,MAAR,IAAkBN,KAAK,CAACE,MAAD,CAAL,CAAcM,KAAhC,EAAsC;AAClC,QAAGF,MAAM,IAAIkB,WAAb,EAAyB;AACrB,UAAG;AACCjB,QAAAA,IAAI,CAACmB,MAAL,CAAYpB,MAAZ,EAAmBmB,OAAnB;AACH,OAFD,CAEC,OAAMJ,GAAN,EAAU;AACPlB,QAAAA,QAAQ,CAACkB,GAAD,CAAR;AACH;;AAEJ;AACJ;;AAED,SAAOlB,QAAQ,CAAC,IAAD,CAAf;;AAEH","sourcesContent":["\r\nvar ROOM_AVAILABLE_USER_NUM = require('./constants').ROOM_AVAILABLE_USER_NUM;\r\nvar MAX_ROOM_NAME_LENGTH =require('./constants').MAX_ROOM_NAME_LENGTH;\r\nvar MIN_ROOM_NAME_LENGTH = require('./constants').MIN_ROOM_NAME_LENGTH;\r\nvar errors = require('./errors')\r\n\r\ninterface Room{\r\n    users:any,\r\n    roomID:string\r\n}\r\n\r\nvar rooms :{[key:string]:Room} ={}\r\n\r\nexport {rooms};\r\n\r\nimport * as user from './user'\r\n\r\n// var forbiddenNames :Array<string>\r\n\r\n// /**\r\n//  * \r\n//  * @param {*} roomName \r\n//  */\r\n// function isNameForbidden(roomName:string){\r\n\r\n//     return forbiddenNames.indexOf(roomIDs) >=0;\r\n// }\r\n\r\n// function isNameTooLong(roomID:String){\r\n\r\n//     return roomID.length > MAX_ROOM_NAME_LENGTH; \r\n// }\r\n\r\n// function isNameTooShort(roomID:String){\r\n\r\n//     return roomID.length < MIN_ROOM_NAME_LENGTH;\r\n// }\r\n\r\n// function isUserinRoom(userID:string,roomID:string){\r\n\r\n//     if (rooms[roomID].users[userID]){\r\n        \r\n//         return true;\r\n//     }else{\r\n//         return false;\r\n//     }\r\n\r\n// }\r\n\r\n\r\n\r\n/**\r\n * Room이 존재하는지 확인\r\n * @param {string} roomID \r\n * @param {function} callback \r\n */\r\nexport function isRoom(roomID:string,callback:any){\r\n    \r\n    if(!roomID){\r\n        return callback(new errors.InvalidMessageError('roomID cat not be null'))\r\n    }\r\n\r\n    if(!rooms[roomID]){\r\n        callback(null,false)\r\n    }else{\r\n        return callback(null,true)\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} roomID \r\n * @param {string} userID \r\n * @param {function} callback \r\n */\r\nexport function createRoom(roomID:string,userID:string,callback:any){\r\n\r\n    // if(!isNameForbidden(roomID)){\r\n\r\n    //     return callback(new Error('roomID is forbiddenNames'));     \r\n    // }\r\n\r\n    // if(!isNameTooLong(roomID)){\r\n\r\n    //     return callback(new Error('roomID is too Long'));\r\n    // }\r\n\r\n    // if(!isNameTooShort(roomID)){\r\n\r\n    //     return callback(new Error('roomID is too Short'))\r\n    // }\r\n\r\n    if(!roomID){\r\n\r\n        return callback(new errors.InvalidMessageError('roomeID can not be null'));\r\n    }\r\n\r\n    if(user.users[userID]){\r\n\r\n        user.users[userID].status = user.USER_STATUS.INROOM;\r\n        user.users[userID].roomID = roomID;\r\n        \r\n        var users :any ={};\r\n\r\n        users[userID]= user.users[userID]; \r\n\r\n        rooms[roomID] = {\r\n            roomID:roomID,\r\n            users:users\r\n        };\r\n\r\n    }else{\r\n        return callback(new errors.InvalidUserError(userID+' dont have connection you have to login first'))\r\n    }\r\n\r\n    var room = rooms[roomID]\r\n\r\n    return callback(null,room)\r\n\r\n}\r\n/**\r\n * \r\n * @param {string} roomID \r\n * @param {function} callback \r\n */\r\n function deleteRoom(roomID:string,callback:any){\r\n\r\n    if(!roomID){\r\n\r\n        return callback(new errors.InvalidMessageError('roomID can not be null'));\r\n    }\r\n\r\n    delete rooms[roomID]\r\n    \r\n    return callback(null)\r\n}\r\n/**\r\n * \r\n * @param {string} roomID \r\n * @param {string} userID \r\n * @param {function} callback \r\n */\r\n\r\nexport function enterRoom(roomID:string,userID:string, callback:any){\r\n\r\n    if(!roomID){\r\n        return callback(new errors.InvalidMessageError('roomename can not be null'));\r\n    }\r\n\r\n    if(!userID){\r\n        return callback(new errors.InvalidMessageError('userID cant not be null'));\r\n    }\r\n\r\n    if(!rooms[roomID]){\r\n        return callback(new errors.InvalidMessageError('room is not avaliavle \\n roomID:'+roomID))  //it will never happen\r\n    }\r\n\r\n    if(!rooms[roomID].users[userID]){\r\n\r\n        user.users[userID].status = user.USER_STATUS.INROOM;\r\n        user.users[userID].roomID = roomID;\r\n        \r\n        rooms[roomID].users[userID] =user.users[userID];\r\n\r\n        return callback(null,rooms[roomID])\r\n    \r\n    }else{\r\n        \r\n        return callback(\r\n            new errors.InvalidMessageError(\r\n                'user is alredy in the room \\n' \r\n                +'userID: '+ userID + '\\n'\r\n                +'roomID: '+ roomID\r\n            )\r\n        );\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} userID \r\n * @param {string} roomID \r\n * @param {function} callback \r\n */\r\nexport function leaveRoom(userID:string,roomID:string,callback:any){\r\n\r\n    if(!roomID){\r\n        return callback(new errors.InvalidMessageError('roomename can not be null'));\r\n    }\r\n\r\n    if(!userID){\r\n        return callback(new errors.InvalidMessageError('userID can not be null'));\r\n    }\r\n\r\n    if( rooms[roomID].users[userID] ){\r\n\r\n        rooms[roomID].users[userID].status = user.USER_STATUS.ONLINE;\r\n        rooms[roomID].users[userID].roomID = null;\r\n        delete rooms[roomID].users[userID];\r\n        \r\n        if(Object.keys(rooms[roomID].users).length<=0){\r\n            deleteRoom(roomID,(err:Error)=>{\r\n\r\n                if(err){\r\n                    return callback(err);\r\n                }\r\n            });\r\n        }\r\n    \r\n    }\r\n\r\n    return callback(null);\r\n    \r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} roomID \r\n * @param {callback} callback \r\n */\r\nexport function checkfull(roomID:string,callback:any){\r\n\r\n    if(!roomID){\r\n        return callback(new errors.InvalidMessageError('roomeID can not be null'));\r\n    }\r\n\r\n    if(roomID.length <= ROOM_AVAILABLE_USER_NUM){\r\n        return callback(null,true);\r\n    }else{\r\n        return callback(null,false);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * 룸에 있는 모든 인원에게 메시지 보내는 function\r\n * @param {string} from_userID \r\n * @param {string} roomID \r\n * @param {Object} message   \r\n * @param {function} callback \r\n */\r\nexport function broadcast(from_userID:string,roomID:string,message:Object,callback:any){\r\n\r\n    if(!from_userID){\r\n        return callback(new errors.InvalidMessageError('userID can not be null'));\r\n    }\r\n\r\n    if(!roomID){\r\n        return callback(new errors.InvalidMessageError('roomID can not be null'));\r\n    }\r\n\r\n    if(!rooms[roomID]){\r\n        return callback(new errors.InvalidMessageError('room is not available'));\r\n    }\r\n\r\n    for(var userID in rooms[roomID].users){\r\n        if(userID != from_userID){\r\n            try{\r\n                user.sendTo(userID,message)\r\n            }catch(err){\r\n                callback(err)\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    return callback(null)\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n"],"file":"room.js"}