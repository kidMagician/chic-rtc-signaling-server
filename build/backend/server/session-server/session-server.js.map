{"version":3,"sources":["../../../../src/backend/server/session-server/session-server.js"],"names":["express","require","bodyParser","NodeConstants","utiles","logger","async","SessionServer","callback","conf","ssl","server","listen","port","https","options","key","cert","createServer","info","exception","console","sessionServer","host","getIP","redis","zookeeper","self","parallel","paralCallback","sessionManager","SessionManager","err","toString","nodeManager","NodeManager","createEphemeralPath","META_PATH","SESSION_SERVER_PATH","getConfigInfo","data","balancing","_start","JSON","stringify","use","FRONTENDPATH","get","req","res","debug","params","rid","uid","errors","BadRequestError","retrieveConnectedNode","sessionData","users","serverNode","userInfo","room","roomID","getServerNode","responseData","serverinfo","signalServer","serverName","name","url","setWSProtocal","stunServer","set","send","sendFile"],"mappings":"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","sourcesContent":["var express = require('express');\r\n\r\nvar bodyParser = require('body-parser');\r\n\r\nimport {SessionManager} from \"../../session-manager/session-manager\"\r\nimport { NodeManager } from \"../../node-manager/node-manager\";\r\nvar NodeConstants = require(\"../../node-manager/constants\")\r\n\r\nvar utiles = require('../../utiles/utiles')\r\nconst  logger  = require('../../logger').logger\r\nconst async = require('async')\r\n\r\nclass SessionServer{\r\n    \r\n    constructor(){\r\n        this.conf={};\r\n        this.server\r\n        this.sessionServer\r\n    }\r\n\r\n    init(conf,callback){\r\n    \r\n        this.conf ={\r\n            port: conf.port || '8000',\r\n            host: this.conf.host || utiles.getIP(),\r\n            redis: conf.redis,\r\n            zookeeper: conf.zookeeper\r\n    \r\n        }\r\n    \r\n        this.server = express()\r\n\r\n        var self =this\r\n\r\n        async.parallel([\r\n            (paralCallback)=>{\r\n    \r\n                this.sessionManager =new SessionManager(this.conf.redis,function (err) {\r\n                    if (err) {\r\n                    \r\n                        logger.info('session server init failed err:',err.toString())\r\n            \r\n                        \r\n                        paralCallback(err);  //TODO:  Callback was already called err \r\n                    }\r\n\r\n                    paralCallback(null)\r\n\r\n                    \r\n                });\r\n            },\r\n            (paralCallback)=>{\r\n                self.nodeManager = new NodeManager(self.conf.zookeeper,true,(err)=>{\r\n\r\n                    if(err){\r\n                        return paralCallback(err)\r\n                    }\r\n\r\n                    self.nodeManager.createEphemeralPath(\r\n                        NodeConstants.META_PATH + NodeConstants.SESSION_SERVER_PATH + '/' + self.conf.host + ':' + self.conf.port,\r\n                        function (err) {\r\n\r\n                            if(err){\r\n                                paralCallback(err)\r\n                            }else{\r\n\r\n                                self.nodeManager.getConfigInfo('balancing', function (data) {\r\n                                    if (data) {\r\n                                        self.conf.balancing = data;\r\n                                    }\r\n                                });\r\n\r\n                                paralCallback(null)\r\n                            }                         \r\n                        }\r\n                    )\r\n\r\n                    \r\n                       \r\n                });\r\n            }\r\n        ],(err)=>{\r\n\r\n            if(err){\r\n                return callback(err)\r\n            }\r\n\r\n            self._start()\r\n\r\n            logger.info(\r\n                \"sessionServer sucessfully inited \"+\r\n                \"\\nconf:\" +JSON.stringify(self.conf)\r\n            )\r\n\r\n            callback(null);\r\n\r\n        })\r\n    }\r\n\r\n    _start(){\r\n        \r\n    \r\n        this.server.use(bodyParser())\r\n    \r\n        var FRONTENDPATH = require('./constants').FRONTENDPATH;\r\n        this.server.use(express.static(FRONTENDPATH))\r\n        \r\n        var self =this\r\n\r\n        this.server.get('/room/:rid/user/:uid',function(req,res){\r\n    \r\n            logger.debug(\"[Seeion server] http get params:\" +JSON.stringify(req.params))\r\n    \r\n            if(!req.params.rid||!req.params.uid){\r\n                \r\n                var err= new errors.BadRequestError(\"userID or roomID could not be null\")\r\n    \r\n                throw err\r\n            }\r\n    \r\n            self.sessionManager.retrieveConnectedNode('CHIC_RTC',req.params.rid,(sessionData)=>{\r\n                \r\n                var users =[]\r\n                var serverNode\r\n    \r\n                if(sessionData || sessionData.userInfo){\r\n    \r\n                    users =sessionData.userInfo \r\n                  \r\n                }\r\n    \r\n                var room ={\r\n                    roomID: req.params.rid,\r\n                    users: users\r\n                }\r\n    \r\n                serverNode =self.nodeManager.getServerNode(req.params.rid)\r\n    \r\n                var responseData ={\r\n                    serverinfo:{\r\n                        signalServer:{\r\n                            serverName: serverNode.name,\r\n                            url: utiles.setWSProtocal(serverNode.url,null)\r\n                        },\r\n                        stunServer: {\"url\": \"stun:stun2.1.google.com:19302\" }\r\n                    },\r\n                    room :room\r\n                }\r\n    \r\n                logger.debug(\r\n                    \"[Seeion server] http get params:\" +JSON.stringify(req.params) +\r\n                    \"\\n response data:\" + JSON.stringify(responseData)\r\n                )\r\n        \r\n                res.set(\"Access-Control-Allow-Origin\",\"*\")\r\n                res.send(responseData)\r\n            })\r\n    \r\n           \r\n        \r\n        })\r\n    \r\n        this.server.get('/',function(req,res){\r\n            \r\n            res.sendFile(FRONTENDPATH+\"/views/client.html\");\r\n    \r\n        })\r\n    \r\n    }\r\n\r\n    listen = function(callback){\r\n\r\n        try{\r\n            if(!this.conf.ssl){\r\n    \r\n                this.server.listen(this.conf.port,(callback))\r\n            }else{\r\n    \r\n                var https = require('https')\r\n                var options = {  \r\n                    key: this.conf.ssl.key,\r\n                    cert: this.conf.ssl.cert\r\n                };\r\n        \r\n                https.createServer(options,this.server).listen(this.conf.port,callback)\r\n    \r\n            }\r\n    \r\n            logger.info(\"sessionServer listening port \",this.conf.port)\r\n    \r\n            //CHECK: try catch working??\r\n    \r\n        }catch(exception){\r\n    \r\n            console.info('session server listening failed err:',exception)\r\n            \r\n            return callback(exception)\r\n        }\r\n    \r\n        return callback(null)\r\n    \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport {SessionServer}"],"file":"session-server.js"}