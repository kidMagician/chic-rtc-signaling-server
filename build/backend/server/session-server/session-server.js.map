{"version":3,"sources":["../../../../src/backend/server/session-server/session-server.ts"],"names":["bodyParser","require","utiles","logger","async","SessionServer","conf","callback","port","host","getIP","redis","zookeeper","server","self","parallel","paralCallback","sessionManager","SessionManager","err","info","toString","nodeManager","NodeManager","createEphemeralPath","NodeConstants","META_PATH","SESSION_SERVER_PATH","getConfigInfo","data","balancing","_start","JSON","stringify","use","FRONTENDPATH","express","get","req","res","debug","params","rid","uid","retrieveConnectedNode","sessionData","users","serverNode","userInfo","room","roomID","getServerNode","responseData","serverinfo","signalServer","serverName","name","url","setWSProtocal","stunServer","set","send","sendFile","ssl","listen","https","options","key","cert","createServer","exception","console"],"mappings":"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","sourcesContent":["import express from 'express'\r\n\r\nvar bodyParser = require('body-parser')\r\n\r\nimport {SessionManager} from \"../../session-manager/session-manager\"\r\nimport { NodeManager } from \"../../node-manager/node-manager\";\r\nimport NodeConstants from \"../../node-manager/constants\"\r\n\r\nvar utiles = require('../../utiles/utiles')\r\nvar  logger = require('../../logger').logger\r\nvar  async = require('async')\r\n\r\ninterface Config { \r\n    port: any;\r\n    host: any|null;\r\n    redis: any;\r\n    zookeeper: any;\r\n    balancing?: any;\r\n    ssl?:any\r\n}\r\n\r\nclass SessionServer{\r\n\r\n    conf:Config;\r\n    server:express.Express\r\n    sessionManager:SessionManager\r\n    nodeManager:NodeManager\r\n    \r\n    constructor(){\r\n    }\r\n\r\n    init(conf:any,callback:any){\r\n    \r\n        this.conf ={\r\n            port: conf.port || '8000',\r\n            host: conf.host || utiles.getIP(),\r\n            redis: conf.redis,\r\n            zookeeper: conf.zookeeper\r\n    \r\n        }\r\n    \r\n        this.server = express()\r\n\r\n        var self =this\r\n\r\n        async.parallel([\r\n            (paralCallback:any)=>{\r\n    \r\n                this.sessionManager =new SessionManager(this.conf.redis,function (err:Error) {\r\n                    if (err) {\r\n                    \r\n                        logger.info('session server init failed err:',err.toString())\r\n            \r\n                        \r\n                        paralCallback(err);  //TODO:  Callback was already called err \r\n                    }\r\n\r\n                    paralCallback(null)\r\n\r\n                    \r\n                });\r\n            },\r\n            (paralCallback:any)=>{\r\n                self.nodeManager = new NodeManager(self.conf.zookeeper,true,(err:Error)=>{\r\n\r\n                    if(err){\r\n                        return paralCallback(err)\r\n                    }\r\n\r\n                    self.nodeManager.createEphemeralPath(\r\n                        NodeConstants.META_PATH + NodeConstants.SESSION_SERVER_PATH + '/' + self.conf.host + ':' + self.conf.port,\r\n                        function (err:Error) {\r\n\r\n                            if(err){\r\n                                paralCallback(err)\r\n                            }else{\r\n\r\n                                self.nodeManager.getConfigInfo('balancing', function (data:any) {\r\n                                    if (data) {\r\n                                        self.conf.balancing = data;\r\n                                    }\r\n                                });\r\n\r\n                                paralCallback(null)\r\n                            }                         \r\n                        }\r\n                    )\r\n\r\n                    \r\n                       \r\n                });\r\n            }\r\n        ],(err:Error)=>{\r\n\r\n            if(err){\r\n                return callback(err)\r\n            }\r\n\r\n            self._start()\r\n\r\n            logger.info(\r\n                \"sessionServer sucessfully inited \"+\r\n                \"\\nconf:\" +JSON.stringify(self.conf)\r\n            )\r\n\r\n            callback(null);\r\n\r\n        })\r\n    }\r\n\r\n    _start(){\r\n        \r\n    \r\n        this.server.use(bodyParser())\r\n    \r\n        var FRONTENDPATH = require('./constants').FRONTENDPATH;\r\n        this.server.use(express.static(FRONTENDPATH))\r\n        \r\n        var self =this\r\n\r\n        this.server.get('/room/:rid/user/:uid',function(req:any,res:any){\r\n    \r\n            logger.debug(\"[Seeion server] http get params:\" +JSON.stringify(req.params))\r\n    \r\n            if(!req.params.rid||!req.params.uid){\r\n                \r\n                // var err= new errors.BadRequestError(\"userID or roomID could not be null\")    //TODO: errors 정의해서 넣기\r\n    \r\n                // throw err\r\n            }\r\n    \r\n            self.sessionManager.retrieveConnectedNode('CHIC_RTC',req.params.rid,(sessionData:any)=>{\r\n                \r\n                var users =[]\r\n                var serverNode\r\n    \r\n                if(sessionData || sessionData.userInfo){\r\n    \r\n                    users =sessionData.userInfo \r\n                  \r\n                }\r\n    \r\n                var room ={\r\n                    roomID: req.params.rid,\r\n                    users: users\r\n                }\r\n    \r\n                serverNode =self.nodeManager.getServerNode(req.params.rid)\r\n    \r\n                var responseData ={\r\n                    serverinfo:{\r\n                        signalServer:{\r\n                            serverName: serverNode.name,\r\n                            url: utiles.setWSProtocal(serverNode.url,null)\r\n                        },\r\n                        stunServer: {\"url\": \"stun:stun2.1.google.com:19302\" }\r\n                    },\r\n                    room :room\r\n                }\r\n    \r\n                logger.debug(\r\n                    \"[Seeion server] http get params:\" +JSON.stringify(req.params) +\r\n                    \"\\n response data:\" + JSON.stringify(responseData)\r\n                )\r\n        \r\n                res.set(\"Access-Control-Allow-Origin\",\"*\")\r\n                res.send(responseData)\r\n            })\r\n    \r\n           \r\n        \r\n        })\r\n    \r\n        this.server.get('/',function(req:any,res:any){\r\n            \r\n            res.sendFile(FRONTENDPATH+\"/views/client.html\");\r\n    \r\n        })\r\n    \r\n    }\r\n\r\n    listen(callback:any){\r\n\r\n        try{\r\n            if(!this.conf.ssl){\r\n    \r\n                this.server.listen(this.conf.port,(callback))\r\n            }else{\r\n    \r\n                var https = require('https')\r\n                var options = {  \r\n                    key: this.conf.ssl.key,\r\n                    cert: this.conf.ssl.cert\r\n                };\r\n        \r\n                https.createServer(options,this.server).listen(this.conf.port,callback)\r\n    \r\n            }\r\n    \r\n            logger.info(\"sessionServer listening port \",this.conf.port)\r\n    \r\n            //CHECK: try catch working??\r\n    \r\n        }catch(exception){\r\n    \r\n            console.info('session server listening failed err:',exception)\r\n            \r\n            return callback(exception)\r\n        }\r\n    \r\n        return callback(null)\r\n    \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport {SessionServer}"],"file":"session-server.js"}