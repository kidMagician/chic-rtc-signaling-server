{"version":3,"sources":["../../../../src/backend/server/channel-server/channel-server.ts"],"names":["EventEmitter","require","util","utiles","async","logger","ChannelServer","conf","signalingServer","callback","host","getIP","port","zookeeper","redis","balancing","SCALE","BUFFER_COUNT","MAX_LEVEL","REPLICA_BASE_NUMBER","serverName","Error","signal","self","parallel","parallelCallback","startReplicas","Math","pow","Number","nodeManager","NodeManager","err","addServerNode","path","substring","lastIndexOf","length","serverNodePath","split","replicas","sessionManager","SessionManager","_start","info","process","on","error","toString","removeAll","nextTick","exit","roomID","room","userID","addUserinfo","asyncCB","updateServerInfo","result","removeUserinfo","removeServerinfo"],"mappings":"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","sourcesContent":["var EventEmitter = require('events').EventEmitter;\r\nvar util = require('util');\r\nvar utiles = require('./../../utiles/utiles')\r\nimport {SessionManager} from '../../session-manager/session-manager'\r\nimport { NodeManager } from '../../node-manager/node-manager';\r\nimport { SignalingServer } from '../signaling-server/signaling-server';\r\nvar async = require('async')\r\nconst  logger  = require('../../logger').logger\r\n\r\ninterface ChannelConfig{\r\n    host:String\r\n    port:String\r\n    zookeeper:any       //TODO: make zooConf interface \r\n    redis:any           //TODO: make redisConf interface\r\n    balancing:any       //TODO: make balancingConf interface\r\n}\r\n\r\nclass ChannelServer extends EventEmitter{\r\n\r\n    conf:ChannelConfig;\r\n    signal:SignalingServer;\r\n    serverName:String;\r\n    sessionManager:SessionManager\r\n    nodeManager:NodeManager\r\n    serverNodePath:String\r\n    replicas:any\r\n\r\n    constructor(){\r\n\r\n        super()\r\n\r\n    }\r\n\r\n    init(conf:any,signalingServer:SignalingServer,callback:any){\r\n\r\n        this.conf ={\r\n            host: conf.host || utiles.getIP(),\r\n            port: conf.port || 9090,\r\n            zookeeper: conf.zookeeper,\r\n            redis: conf.redis,\r\n            balancing:{\r\n                SCALE: 60, // 단계별 Connection 수\r\n                BUFFER_COUNT: 10, // replica 수정에 대한 인계치 버퍼\r\n                MAX_LEVEL: 4, // scale 배수\r\n                REPLICA_BASE_NUMBER: 4 //\r\n            }\r\n            \r\n        }\r\n\r\n        this.serverName= conf.serverName\r\n\r\n\r\n        if(!signalingServer){\r\n            callback(new Error(\"websocket cant not be null\"))\r\n        }\r\n\r\n        this.signal = signalingServer;\r\n\r\n        var self = this\r\n\r\n        async.parallel([\r\n            function(parallelCallback:any){\r\n    \r\n                var startReplicas = Math.pow(Number(self.conf.balancing['REPLICA_BASE_NUMBER']), Number(self.conf.balancing['MAX_LEVEL']));\r\n    \r\n                self.nodeManager = new NodeManager(self.conf.zookeeper,false,(err:Error)=>{\r\n    \r\n                    if(err){\r\n\r\n                        return parallelCallback(err)\r\n                    }\r\n\r\n                    self.nodeManager.addServerNode(self.conf, startReplicas, function(err:Error, path:String) {\r\n\r\n                        if(err){\r\n                            return parallelCallback(err)\r\n                        }\r\n                        var serverName = path.substring(path.lastIndexOf('/') + 1, path.length);\r\n                        self.serverNodePath = path;\r\n    \r\n                        self.serverName = serverName.split('^')[0];\r\n    \r\n                        self.replicas = startReplicas;\r\n    \r\n    \r\n                        parallelCallback(err);\r\n                        \r\n    \r\n                        \r\n                    });\r\n\r\n                    \r\n                })\r\n    \r\n            },\r\n            function(parallelCallback:any){\r\n\r\n                self.sessionManager = new SessionManager(self.conf.redis,(err:Error)=>{\r\n                    if (err) {\r\n                        parallelCallback(err);\r\n                    }\r\n        \r\n                    parallelCallback(null)\r\n                    \r\n                })\r\n            }\r\n        ],(err:Error)=>{\r\n\r\n            if(err){\r\n                return callback(err)\r\n            }\r\n\r\n            self._start()\r\n            logger.info(\"channel server successfully inited port: \"+ conf.port)\r\n            callback(null)\r\n            \r\n\r\n        })\r\n\r\n        \r\n\r\n        process.on('uncaughtException', function(error) {\r\n            logger.info(\"channel uncaughtException.... \"+ error.toString())\r\n            self.sessionManager.removeAll(\"chicRTC\",self.serverName,(err:Error)=>{\r\n                process.nextTick(function() { process.exit(1) })\r\n            })\r\n\r\n        })\r\n\r\n        \r\n        \r\n    }\r\n\r\n    _start(){\r\n        \r\n        var self = this;\r\n        \r\n\r\n        self.signal.on('enterRoom', function(roomID,room,userID) {\r\n\r\n            self.sessionManager.addUserinfo(\r\n                'CHIC_RTC',roomID,userID,(err:Error)=>{\r\n                    if(err){\r\n                        return logger.error(err) //TODO: errHandle\r\n                    }\r\n                }\r\n            ); \r\n            \r\n        }); \r\n\r\n        this.signal.on(\"createRoom\", function(roomID,room,userID) { \r\n\r\n            async.parallel(\r\n                [\r\n                    (asyncCB:any)=>{\r\n\r\n                        self.sessionManager.addUserinfo(\r\n                            'CHIC_RTC',room.roomID,userID,asyncCB\r\n                        )\r\n\r\n                    },\r\n                    (asyncCB:any)=>{\r\n                        self.sessionManager.updateServerInfo(\r\n                            'CHIC_RTC',roomID,self.serverName,asyncCB\r\n                        ); \r\n                    }\r\n                    \r\n                ],\r\n                (err:Error,result:any)=>{\r\n\r\n                    if(err){\r\n                        return logger.error(err)\r\n                    }\r\n                    //TODO: something\r\n                }\r\n\r\n            )\r\n\r\n        })\r\n\r\n        this.signal.on(\"leaveRoom\", function(roomID,room,userID) { \r\n\r\n            self.sessionManager.removeUserinfo(\r\n                'CHIC_RTC',\r\n                roomID,\r\n                userID,\r\n                (err:Error)=>{\r\n                    if(err){\r\n                        return logger.error(err) //TODO: errHandle\r\n                    }\r\n                }\r\n            )\r\n\r\n            if(!room){\r\n\r\n                self.sessionManager.removeServerinfo(\r\n                    'CHIC_RTC',\r\n                    roomID,\r\n                    (err:Error)=>{\r\n                        if(err){\r\n                            return logger.error(err) //TODO: errHandle\r\n                        }\r\n                    }\r\n                )\r\n            }\r\n\r\n        \r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {ChannelServer}"],"file":"channel-server.js"}