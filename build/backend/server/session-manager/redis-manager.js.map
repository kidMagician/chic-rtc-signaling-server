{"version":3,"sources":["../../../../src/backend/server/session-manager/redis-manager.js"],"names":["util","require","redis","async","RedisShard","module","exports","RedisManager","config","self","clients","masterOptions","hasSlaveNode","String","splitedConfig","host","port","master","slave","client","createClient","push","shardedClient","options","servers","WRITES","forEach","command","apply","arguments","READS","on","event","listener","c","args","Array","prototype","slice","call","undefined","once","parallel","callback","connected","length","err","results","concat","batchWrite","batch","batchRead"],"mappings":"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","sourcesContent":["var util = require('util'),\r\n  redis = require('redis'),\r\n  async = require('async'),\r\n  RedisShard = require('redis-shard');\r\n\r\nmodule.exports = function RedisManager(config) {\r\n\r\n  var self = {};\r\n  var clients = [];\r\n  var masterOptions;\r\n  var hasSlaveNode = false;\r\n\r\n  \r\n  if (config) {\r\n    if (typeof config === 'string' || config instanceof String) {\r\n      \r\n      var splitedConfig //TODO: config splite and err handle\r\n      \r\n      masterOptions = {\r\n        host:splitedConfig[0],\r\n        port:splitedConfig[1]\r\n      }\r\n      \r\n    } else {\r\n\r\n      \r\n      if (config.master) {\r\n        masterOptions = config.master;\r\n      } else {\r\n        masterOptions = config;\r\n      }\r\n\r\n      hasSlaveNode = config && config.slave;  //TODO: what for\r\n      \r\n\r\n    }\r\n  }\r\n\r\n  if(!masterOptions) {\r\n    masterOptions = {\r\n      host:\"127.0.0.1\",\r\n      port:\"6379\"\r\n    }\r\n  }\r\n\r\n  var client = redis.createClient(masterOptions);\r\n  clients.push(client);\r\n\r\n  var shardedClient;\r\n\r\n  if (hasSlaveNode) {\r\n    var options = {servers: config.slave};\r\n    shardedClient = new RedisShard(options);\r\n    clients.push(shardedClient);\r\n  }\r\n\r\n  var WRITES = [\r\n    \"del\", \"publish\", \"subscribe\", \"hset\", \"hdel\", \"set\", \"expire\", \"hmset\", \"sadd\", \"smembers\",\"srem\", \"hsetnx\", \"incr\", \"decr\", \"hincrby\", \"lpush\", \"lrem\", \"rpop\", \"zadd\", \"zrem\", \"zincrby\"\r\n  ];\r\n\r\n  WRITES.forEach(function (command) {\r\n    self[command] = function () {\r\n      client[command].apply(client, arguments);\r\n    };\r\n  });\r\n\r\n  var READS = [\r\n    \"hget\", \"hgetall\", \"get\", \"hlen\", \"hscan\", \"hexists\", \"mget\", \"exists\", \"llen\", \"lrange\", \"zcard\", \"zscore\", \"zrank\", \"zrange\", \"zscore\"\r\n  ];\r\n\r\n  READS.forEach(function (command) {\r\n    self[command] = function () {\r\n      if (shardedClient) {\r\n        shardedClient[command].apply(client, arguments);\r\n      } else {\r\n        client[command].apply(client, arguments);\r\n      }\r\n    };\r\n  });\r\n\r\n  self.on = function (event, listener) {\r\n    clients.forEach(function (c) {\r\n      c.on(event, function () {\r\n        // append server as last arg passed to listener\r\n        var args = Array.prototype.slice.call(arguments);\r\n        listener.apply(undefined, args);\r\n      });\r\n    });\r\n  };\r\n\r\n  // Note: listener will fire once per shard, not once per cluster\r\n  self.once = function (event, listener) {\r\n\r\n    async.parallel(\r\n      [\r\n        function (callback) {\r\n          client.once(event, function () {\r\n            callback(undefined, 'one');\r\n          });\r\n        },\r\n        function (callback) {\r\n          if (hasSlaveNode) {\r\n            var connected = 0;\r\n            shardedClient.once(event, function () {\r\n              connected++;\r\n              if (connected == config.slave.length) {\r\n                callback(undefined, 'two');\r\n              }\r\n            });\r\n          } else {\r\n            callback(undefined, 'two');\r\n          }\r\n        }\r\n      ],\r\n      function (err, results) {\r\n        var args = Array.prototype.slice.call(arguments).concat(\"result\");\r\n        listener.apply(undefined, args);\r\n      }\r\n    );\r\n  };\r\n\r\n  self.batchWrite = function(){\r\n    return client.batch();\r\n  };\r\n\r\n  self.batchRead = function(){\r\n    if( shardedClient ){\r\n      return shardedClient.batch();\r\n    } else {\r\n      return client.batch();\r\n    }\r\n  };\r\n\r\n  return self;\r\n};"],"file":"redis-manager.js"}