{"version":3,"sources":["../../../src/backend/session-manager/session-manager.js"],"names":["RedisManager","require","logger","async","Constants","SERVER_INFO","USER_INFO","SessionManager","config","callback","conf","redisClient","on","err","error","warn","once","info","app","roomID","ukey","skey","serverInfo","userInfo","parallel","asyncCB","smembers","res","get","results","userID","sadd","result","debug","server","set","del","srem","memberCount","i","self","spop","JSON","stringify","console","log","roomIDs","forEach","hkey","SMOOTHY_CONNECTION","hdel"],"mappings":"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","sourcesContent":["\r\nvar RedisManager = require('./redis-manager');\r\n\r\nconst  logger  = require('../logger').logger\r\nconst async = require('async')\r\n\r\nvar Constants = {\r\n  SERVER_INFO: 'SERVER_INFO',\r\n  USER_INFO: 'USER_INFO'\r\n}\r\n\r\n\r\nclass SessionManager{\r\n  \r\n  constructor(config, callback) {\r\n\r\n    this.conf = {};\r\n\r\n    if (typeof(config) == 'function' && !callback) {\r\n      callback = config;\r\n\r\n      // default configurations\r\n      // this.conf.expire = 120; // redis expire TTL (seconds)\r\n\r\n    } else {\r\n      if (config) this.conf = config;\r\n    }\r\n\r\n    this.redisClient = new RedisManager(this.conf);\r\n\r\n\r\n    this.redisClient.on(\"error\", function (err) {\r\n\r\n      logger.error(\"Redis error encountered : \" + err);\r\n      if (callback) callback(\"Redis error encountered :\" +err);\r\n    });\r\n\r\n    this.redisClient.on(\"end\", function (err) {\r\n\r\n      logger.warn(\"Redis connection closed\");\r\n      if (callback) callback('ERR-REDIS', 'failed to connect to Redis server(s). ');\r\n    });\r\n\r\n    this.redisClient.once(\"connect\", function () {\r\n\r\n      logger.info(\"successfully redis connected\")\r\n      if (callback) callback(null);\r\n    });\r\n\r\n  };\r\n\r\n  /**\r\n   * Get the server number according to channel name from redis hash table.\r\n\r\n  * @name retrieve\r\n  * @function\r\n  * @param {string} app - application key\r\n  * @param {string} channel - channel name\r\n  * @param {callback} callback - callback function\r\n  */\r\n  retrieveConnectedNode(app, roomID, callback) {\r\n\r\n    var ukey =Constants.USER_INFO +\":\"+app +\":\"+ roomID\r\n    var skey = Constants.SERVER_INFO+\":\"+ app +\":\"+roomID;\r\n\r\n    var serverInfo\r\n    var userInfo\r\n\r\n    async.parallel(\r\n      [\r\n        (asyncCB)=>{\r\n\r\n          this.redisClient.smembers(ukey, function (err, res) {\r\n\r\n            if(err){\r\n              return asyncCB(err);\r\n            }\r\n\r\n            userInfo=res\r\n\r\n            return asyncCB();\r\n          });\r\n\r\n        },\r\n        (asyncCB)=>{\r\n          this.redisClient.get(skey, function (err, res) {\r\n\r\n            if(err){\r\n              return asyncCB(err);\r\n            }\r\n\r\n            serverInfo=res\r\n\r\n            return asyncCB();\r\n          });\r\n\r\n        }\r\n      ],(err,results)=>{\r\n\r\n        if(err){\r\n          return callback(err) //TODO: errhanld\r\n        }\r\n\r\n        callback(null,{\r\n          userInfo,\r\n          serverInfo\r\n          \r\n        })\r\n        \r\n      }\r\n\r\n    )\r\n\r\n    return\r\n\r\n  };\r\n\r\n  addUserinfo(app, roomID, userID, callback) {\r\n\r\n    var ukey =Constants.USER_INFO +\":\"+app +\":\"+ roomID\r\n  \r\n    this.redisClient.sadd(ukey,userID,(err,result)=>{\r\n  \r\n      if(err){\r\n        callback(err)\r\n  \r\n        return\r\n      }\r\n  \r\n      logger.debug(\r\n        \"successfully add userInfo(set) in redis \" +\r\n        `\\n key: ${ukey}, value:${userID}` \r\n      )\r\n  \r\n      callback()\r\n  \r\n      return \r\n  \r\n    })\r\n  \r\n    return;\r\n  }\r\n  \r\n  updateServerInfo(app, roomID, server, callback) {\r\n\r\n    var skey = Constants.SERVER_INFO+\":\"+ app +\":\"+roomID;\r\n  \r\n    this.redisClient.set(skey,server,(err,result)=>{\r\n  \r\n      if(err){\r\n        callback(err)\r\n  \r\n        return\r\n      }\r\n  \r\n      logger.debug(\r\n        \"successfully set serverinfo(strings) in redis, \"+\r\n        `key: ${skey}, value: ${server}` \r\n      )\r\n  \r\n      return callback()\r\n  \r\n    });\r\n  \r\n    return;\r\n  }\r\n  \r\n  \r\n  \r\n  removeServerinfo(app, roomID, callback) {\r\n\r\n    var skey = Constants.SERVER_INFO+\":\"+ app +\":\"+roomID;\r\n  \r\n    this.redisClient.del(skey,(err,result)=>{\r\n  \r\n      if(err){\r\n        callback(err)\r\n  \r\n        return\r\n      }\r\n  \r\n      logger.debug(\r\n        \"successfully del serverinfo(strings) in redis\"+\r\n        \"skey:\" +skey \r\n      )\r\n  \r\n      return callback()\r\n  \r\n    });\r\n  \r\n    return;\r\n  \r\n  }\r\n  \r\n  \r\n  /**\r\n   * Remove server datas from redis hash table\r\n  \r\n   * @name remove\r\n   * @function\r\n   * @param {string} app - application key\r\n   * @param {string} roomID - room ID\r\n   * @param {string} server - server name\r\n  \r\n   */\r\n  \r\n  removeUserinfo(app,roomID,userID,callback){\r\n  \r\n    var ukey =Constants.USER_INFO +\":\"+app +\":\"+ roomID\r\n  \r\n    this.redisClient.srem(ukey,userID,(err,result)=>{\r\n  \r\n      if(err){\r\n        \r\n        return callback(err) //TODO: add err message \r\n      }\r\n  \r\n      logger.debug(\r\n        \"successfully remove userinfo(strings) in redis\"+\r\n        `\\nkey${ukey}, value: ${userID}` \r\n      )\r\n  \r\n      return callback()\r\n  \r\n    });\r\n  \r\n      //TODO: errhandle\r\n  \r\n    return;\r\n  \r\n  }\r\n  \r\n  removeAllUserinfo(app,roomID){\r\n  \r\n    var ukey =Constants.USER_INFO +\":\"+app +\":\"+ roomID\r\n  \r\n    //대충 코드 짬 다시 짜야함\r\n  \r\n    this.redisClient.smembers(ukey,(err,result)=>{\r\n  \r\n      if(err){\r\n        return callback(err)\r\n        //TODO: errHandle\r\n      }\r\n  \r\n      var memberCount =result\r\n  \r\n      for(var i=0; i<memberCount;i++){\r\n        self.redisClient.spop(roomID) \r\n      }\r\n      \r\n    })\r\n  \r\n    return;\r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  removeAll(app, server,callback) {\r\n  \r\n    var self = this;\r\n    \r\n    var skey = server;\r\n  \r\n    this.redisClient.smembers(skey,(err,results)=>{\r\n      \r\n      if(err){\r\n        \r\n        return callback(err); //TODO: errHandle\r\n      }\r\n  \r\n      logger.debug(JSON.stringify(results));\r\n      console.log(JSON.stringify(results));\r\n      var roomIDs =results;\r\n  \r\n      roomIDs.forEach((roomID)=>{\r\n  \r\n        var hkey = Constants.SMOOTHY_CONNECTION + ':' + app + ':' + roomID;\r\n        \r\n        self.redisClient.hdel(hkey,server)\r\n  \r\n      })\r\n  \r\n      self.redisClient.del(skey)\r\n  \r\n      callback(null)\r\n  \r\n    });\r\n  \r\n  };\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// /**\r\n//  * Update connection informations into redis server.\r\n//  * If the number of connections in this channel is ZERO, delete data from redis hash table.\r\n//  *\r\n//  * @name update\r\n//  * @function\r\n//  * @param {string} app - application key\r\n//  * @param {string} channel - channel name\r\n//  * @param {string} server - server number (auth-generated into zookeeper)\r\n//  * @param {number} userlist -userList\r\n//  *\r\n//  */\r\n// SessionManager.prototype.updateConnectedNode = function (app, roomID, server, userlist, callback) {\r\n\r\n//   var hkey =  app + ':' + roomID;\r\n//   var skey =  app + ':' + server;\r\n\r\n//   var self =this;\r\n\r\n//   if (callback) {\r\n//     if (userlist) {\r\n//       async.parallel([\r\n//         function(asyncCB){\r\n\r\n//           self.redisClient.hset(hkey, server, userlist, asyncCB)\r\n\r\n//         },function(asyncCB){\r\n\r\n//           self.redisClient.sadd(skey,roomID,asyncCB);\r\n\r\n//         }\r\n//       ],(err,results)=>{\r\n\r\n//         if(err){\r\n//           return callback(err)\r\n//         }\r\n//         return callback(null,results);\r\n//       })\r\n\r\n//       if (this.conf && this.conf.expire) {\r\n//         this.redisClient.expire(hkey, this.conf.expire, function (err, res) {\r\n//         });\r\n//       }\r\n//     } else {\r\n//       async.parallel([\r\n//         function(asyncCB){\r\n\r\n//           self.redisClient.hdel(hkey, server, asyncCB);\r\n\r\n//         },function(asyncCB){\r\n//           self.redisClient.srem(skey,roomID,asyncCB);\r\n//         }\r\n//       ],(err,results)=>{\r\n\r\n//         if(err){\r\n//           return callback(err)\r\n//         }\r\n//         return callback(null,results);\r\n//       })\r\n\r\n//     }\r\n\r\n//   } else {\r\n//     if (userlist ) {\r\n\r\n//       this.redisClient.hset(hkey, server, userlist);\r\n//       this.redisClient.sadd(skey,roomID);\r\n\r\n//       if (this.conf && this.conf.expire) {\r\n//         this.redisClient.expire(hkey, this.conf.expire, function (err, res) {\r\n//         });\r\n//       }\r\n\r\n//     } else {\r\n//       this.redisClient.hdel(hkey, server);\r\n//       this.redisClient.srem(skey,roomID);\r\n//     }\r\n//   }\r\n  \r\n// };\r\n\r\n\r\n\r\n\r\nexport {\r\n  SessionManager\r\n}"],"file":"session-manager.js"}