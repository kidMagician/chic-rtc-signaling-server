{"version":3,"sources":["../../../src/backend/node-manager/consistent-hashing.js"],"names":["crypto","require","ConsistentHashing","exports","servers","options","replicas","algorithm","ring","keys","nodes","nodemap","key","ninfo","split","addNode","prototype","name","node","re","push","i","id","sort","getNodeMap","getNode","getRingLength","hash","pos","getNodePosition","result","url","getNodeByName","upper","lower","idx","comp","Math","floor","compare","Object","length","v1","v2","str","createHash","update","digest"],"mappings":"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","sourcesContent":["var crypto = require('crypto');\r\n\r\nvar ConsistentHashing = exports.ConsistentHashing = function (servers, options) {\r\n  this.replicas = 160;\r\n  this.algorithm = 'md5';\r\n  this.ring = {};\r\n  this.keys = [];\r\n  this.nodes = [];\r\n\r\n  this.nodemap = {};\r\n\r\n  if (options && options.replicas)  this.replicas = options.replicas;\r\n  if (options && options.algorithm) this.algorithm = options.algorithm;\r\n\r\n  if (!servers) servers = {};\r\n\r\n  for (var key in servers) {\r\n    var ninfo = servers[key].split('^');\r\n    this.addNode(ninfo[0], servers[key], ninfo[2]);\r\n  }\r\n};\r\n\r\n\r\nConsistentHashing.prototype.addNode = function(name, node, re) {\r\n  this.nodes.push(node);\r\n\r\n  if (re) {\r\n\r\n  } else {\r\n    re = this.replicas;\r\n  }\r\n\r\n  for (var i = 0; i < re; i++) {\r\n    var key = this.crypto((node.id || node) + ':' + i);\r\n\r\n    this.keys.push(key);\r\n    this.ring[key] = node;\r\n  }\r\n\r\n  this.keys.sort();\r\n  this.nodemap[name] = node;\r\n};\r\n\r\n\r\n\r\nConsistentHashing.prototype.getNodeMap = function () {\r\n  return this.nodemap;\r\n};\r\n\r\nConsistentHashing.prototype.getNode = function (key) {\r\n  if (this.getRingLength() == 0) return 0;\r\n\r\n  var hash = this.crypto(key);\r\n  var pos = this.getNodePosition(hash);\r\n\r\n  var result = this.ring[this.keys[pos]];\r\n  return {name: result.split('^')[0], url: result.split('^')[1], replicas: result.split('^')[2]};\r\n\r\n};\r\n\r\nConsistentHashing.prototype.getNodeByName = function (name) {\r\n  \r\n  if (this.getRingLength() == 0) return 0;\r\n\r\n  var result = this.nodemap[name];\r\n\r\n  if (result) {\r\n    return {name: result.split('^')[0], url: result.split('^')[1], replicas: result.split('^')[2]};\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nConsistentHashing.prototype.getNodePosition = function (hash) {\r\n  var upper = this.getRingLength() - 1;\r\n  var lower = 0;\r\n  var idx = 0;\r\n  var comp = 0;\r\n\r\n  if (upper == 0) return 0;\r\n\r\n  while (lower <= upper) {\r\n    idx = Math.floor((lower + upper) / 2);\r\n    comp = this.compare(this.keys[idx], hash);\r\n\r\n    if (comp == 0) {\r\n      return idx;\r\n    } else if (comp > 0) {\r\n      upper = idx - 1;\r\n    } else {\r\n      lower = idx + 1;\r\n    }\r\n  }\r\n\r\n  if (upper < 0) {\r\n    upper = this.getRingLength() - 1;\r\n  }\r\n\r\n  return upper;\r\n};\r\n\r\n\r\nConsistentHashing.prototype.getRingLength = function () {\r\n  return Object.keys(this.ring).length;\r\n};\r\n\r\n\r\nConsistentHashing.prototype.compare = function (v1, v2) {\r\n  return v1 > v2 ? 1 : v1 < v2 ? -1 : 0;\r\n};\r\n\r\n\r\nConsistentHashing.prototype.crypto = function (str) {\r\n  return crypto.createHash(this.algorithm).update(str).digest('hex');\r\n};\r\n"],"file":"consistent-hashing.js"}