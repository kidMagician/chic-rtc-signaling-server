{"version":3,"sources":["../../../src/backend/node-manager/node-manager.js"],"names":["zookeeper","require","logger","constants","async","ConsistentHashing","NodeManager","addr","isWatching","callback","key","cb","self","path","BASE_ZNODE_PATH","CONFIG_PATH","_w","event","type","_getConfigNode","zkClient","getData","error","data","stat","name","configData","tmp","toString","JSON","parse","address","ready","nodeRing","servers","serverArray","connected","connectionTryNum","_connect","createClient","retries","once","info","_initPath","CHANNEL_SERVERS_PATH","META_PATH","APP_PATH","SESSION_SERVER_PATH","_watchServerNodes","console","log","connect","nodePath","exists","stack","_createZnode","create","CreateMode","PERSISTENT","nodeData","Buffer","EPHEMERAL","getCode","Exception","NODE_EXISTS","getName","remove","err","getChildren","children","warn","CONNECTION_LOSS","close","max","length","nodeTask","taskId","value","_getServerNode","function_array","splice","startTask","finalTask","waterfall","result","childPath","indexOf","undefined","replicas","push","config","host","port","serverName","nodes","stats","server","isExisted","names","existedPathName","i","ninfo","split","inx","Number","maxBefore","Math","floor","random","_createEphemeralZnode","getNode"],"mappings":"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","sourcesContent":["\r\nvar zookeeper = require('node-zookeeper-client'),\r\n  logger = require('../logger').logger,\r\n\r\n  constants = require('./constants'),\r\n  async = require('async'),\r\n  ConsistentHashing = require('./consistent-hashing').ConsistentHashing;\r\n\r\n/**\r\n * 서버정보를 Zookeeper에 등록 후 watching 하면서 사용가능한 서버를 동적으로 관리하기 위한 모듈\r\n * @module\r\n * @name NodeManager\r\n */\r\n class NodeManager{\r\n \r\n    constructor(addr, isWatching, callback) {\r\n\r\n        this.address = addr || 'localhost:2181';\r\n        this.ready = false;\r\n        this.isWatching = isWatching;\r\n    \r\n        this.nodeRing = new ConsistentHashing();\r\n        this.servers = {};\r\n        this.serverArray = [];\r\n    \r\n        this.connected = false;\r\n        this.connectionTryNum = 0;\r\n    \r\n        this._connect(isWatching, callback);\r\n    };\r\n  \r\n  \r\n  _connect(isWatching, callback) {\r\n  \r\n    var self = this;\r\n  \r\n    this.zkClient = zookeeper.createClient(this.address, {retries: 2});\r\n  \r\n    this.zkClient.once('connected', function () {\r\n\r\n      logger.info(\"successfully ZOOKEEPER is connected\")\r\n\r\n      self.connected = true;\r\n\r\n      self._initPath('', function () {\r\n        self._initPath(constants.CHANNEL_SERVERS_PATH, function () {\r\n          self._initPath(constants.META_PATH, function () {\r\n            self._initPath(constants.META_PATH + constants.APP_PATH, function () {\r\n              self._initPath(constants.META_PATH + constants.SESSION_SERVER_PATH, function () {\r\n\r\n                if (isWatching) {\r\n                  self._watchServerNodes();\r\n\r\n                  console.log(\"start watching serverNodes\")\r\n                }\r\n\r\n                self.ready = true;\r\n  \r\n                if (callback) callback();\r\n              })\r\n            })\r\n          })\r\n        })\r\n      })\r\n        //TODO: write watching code\r\n    });\r\n  \r\n    this.zkClient.connect();\r\n  };\r\n  \r\n  /**\r\n   * User 정보가 있는지 확인 후에 있는 경우 수정한다. deviceId를 필수로 입력받아야 한다.\r\n   * @name isReady\r\n   * @function\r\n   */\r\n  isReady() {\r\n    return this.ready;\r\n  };\r\n  \r\n  /**\r\n   * Zookeeper에 nodePath가 있는지 확인 후 없는 경우 생성함.\r\n   * @private\r\n   * @name _initPath\r\n   * @function\r\n   * @param {string} nodePath - node path\r\n   * @param {callback} done - 초기화 후 수행할 callback function\r\n   */\r\n  _initPath(nodePath, callback) {\r\n  \r\n    var self = this;\r\n  \r\n    self.zkClient.exists(\r\n      constants.BASE_ZNODE_PATH + nodePath,\r\n      function (error, stat) {\r\n        if (error) {\r\n          logger.error(error.stack);\r\n          return;\r\n        }\r\n  \r\n        if (!stat) {\r\n          self._createZnode(nodePath, callback);\r\n        } else {\r\n          if (callback) callback(null);\r\n        }\r\n      });\r\n  \r\n  };\r\n  \r\n  /**\r\n   * Zookeeper에 node를 persistent 모드로 생성함.\r\n   * @private\r\n   * @name _createZnode\r\n   * @function\r\n   * @param {string} nodePath - node path\r\n   * @param {callback} done - 초기화 후 수행할 callback function\r\n   */\r\n  _createZnode(nodePath, callback) {\r\n    this.zkClient.create(\r\n      constants.BASE_ZNODE_PATH + nodePath,\r\n      zookeeper.CreateMode.PERSISTENT,\r\n      function (error) {\r\n        if (error) {\r\n          logger.error('Failed to create node: %s due to: %s.', constants.BASE_ZNODE_PATH + nodePath, error);\r\n          if (callback) callback(error);\r\n        } else {\r\n          if (callback) callback(null);\r\n        }\r\n      }\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Zookeeper에 node를 EPHEMERAL 모드로 생성함.\r\n   * @private\r\n   * @name _createEphemeralZnode\r\n   * @function\r\n   * @param {string} nodePath - node path\r\n   * @param {data} data - node data\r\n   * @param {callback} done - 초기화 후 수행할 callback function\r\n   */\r\n  _createEphemeralZnode(nodePath, data, callback) {\r\n  \r\n    var nodeData;\r\n  \r\n    if (data && !callback) {\r\n      callback = data;\r\n    } else if (data && callback) {\r\n      nodeData = new Buffer(data);\r\n    }\r\n  \r\n    this.zkClient.create(\r\n      constants.BASE_ZNODE_PATH + nodePath,\r\n      nodeData,\r\n      zookeeper.CreateMode.EPHEMERAL,\r\n      function (error) {\r\n  \r\n  \r\n        if (error) {\r\n          if (error.getCode() == zookeeper.Exception.NODE_EXISTS) {\r\n            if (callback) callback(null);\r\n          } else {\r\n            logger.error('Failed to create node: %s due to: %s.', constants.BASE_ZNODE_PATH + nodePath, error.getName());\r\n            if (callback) callback(error);\r\n          }\r\n  \r\n  \r\n        } else {\r\n\r\n          logger.info(\r\n            \"succeesfully create createEphemeralZnode\" +\r\n            \"\\nnodePath: \"+ constants.BASE_ZNODE_PATH + nodePath +\r\n            \"\\nnodeData: \"+ nodeData\r\n          )\r\n          if (callback) callback(null);\r\n        }\r\n      }\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Zookeeper에 node를 persistent 모드로 생성함.\r\n   * @private\r\n   * @name _createZnodeWithData\r\n   * @function\r\n   * @param {string} nodePath - node path\r\n   * @param {object} - node에 저장할 data\r\n   * @param {callback} callback - 초기화 후 수행할 callback function\r\n   */\r\n  _createZnodeWithData(nodePath, data, callback) {\r\n  \r\n    this.zkClient.create(\r\n      constants.BASE_ZNODE_PATH + nodePath,\r\n      new Buffer(data),\r\n      zookeeper.CreateMode.PERSISTENT,\r\n      function (error) {\r\n        if (error) {\r\n          logger.error('Failed to create node: %s due to: %s.', constants.BASE_ZNODE_PATH + nodePath, error);\r\n          if (callback) callback(error);\r\n        } else {\r\n          if (callback) callback(null);\r\n        }\r\n      }\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Zookeeper에서 node를 삭제함\r\n   * @private\r\n   * @name _removeZnode\r\n   * @function\r\n   * @param {string} nodePath - node path\r\n   * @param {callback} callback - 초기화 후 수행할 callback function\r\n   */\r\n  _removeZnode(nodePath, callback) {\r\n    this.zkClient.remove(\r\n      constants.BASE_ZNODE_PATH + nodePath,\r\n      -1,\r\n      function (err) {\r\n        if (err) {\r\n          logger.error('Failed to remove node: %s due to: %s.', constants.BASE_ZNODE_PATH + nodePath, err);\r\n          if (callback) callback(err);\r\n        } else {\r\n          if (callback) callback(null);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  _watchServerNodes(){\r\n    var self = this;\r\n    \r\n    this.zkClient.getChildren(\r\n      constants.BASE_ZNODE_PATH + constants.CHANNEL_SERVERS_PATH,\r\n      function (event) {\r\n      \r\n        self._watchServerNodes();\r\n      },\r\n      function (error, children, stat) {\r\n        if (error) {\r\n\r\n          logger.warn('Failed to list children due to: %s.', error);\r\n          if (error.getCode() == zookeeper.Exception.CONNECTION_LOSS) { \r\n            self.zkClient.close();\r\n            self._connect(self.isWatching, function (err) {\r\n              if (err) logger.error(err);\r\n            })\r\n          }\r\n\r\n        } else {\r\n\r\n          var max = children.length;\r\n\r\n          var nodeTask = function (taskId, value, callback) {           //its so complicated. change to promise(?) or something\r\n\r\n            self._getServerNode(children[taskId], function () {\r\n              taskId++\r\n              if (taskId < max) {\r\n                function_array.splice(function_array.length - 1, 0, nodeTask);\r\n              }\r\n              callback(null, taskId, ++value);   //TODO callback check\r\n            });\r\n          };\r\n\r\n          var startTask = function (callback) {\r\n            self.servers = {};\r\n            function_array.splice(function_array.length - 1, 0, nodeTask);\r\n            callback(null, 0, 0);       //TODO callback check\r\n          };\r\n\r\n          var finalTask = function (taskId, value, callback) {\r\n            callback(null, value);      //TODO callback check\r\n          };\r\n\r\n          var function_array = [startTask, finalTask];\r\n\r\n          if (max > 0) {\r\n\r\n            logger.info('  [event] server nodes [' + max + '] : ' + children);\r\n\r\n            async.waterfall(function_array, function (err, result) {\r\n              self.serverArray = [];\r\n              self.serverArray = children;\r\n              self.nodeRing = new ConsistentHashing(self.servers);\r\n            });\r\n          } else {\r\n            \r\n            \r\n            self.nodeRing = new ConsistentHashing();\r\n            logger.warn('  [event] server nodes [0] : NOT EXISTED');\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * get node info from zookeeper and input servers and serverArray\r\n   * @name _getServerNode\r\n   * @function\r\n   * @param {number} childPath - childPath\r\n   * @param {callback} callback -cb\r\n   */\r\n  _getServerNode(childPath, cb) {\r\n    var self = this;\r\n    var path = constants.BASE_ZNODE_PATH + constants.CHANNEL_SERVERS_PATH + '/' + childPath;\r\n\r\n    var _w = function (event) {\r\n      \r\n      if (event.type == 3) {\r\n        self._getServerNode(childPath);\r\n      }\r\n    };\r\n\r\n    if (cb && self.serverArray.indexOf(childPath) > -1) {\r\n      _w = undefined;\r\n    }\r\n\r\n    self.zkClient.getData(path,\r\n      _w,\r\n      function (error, data, stat) {\r\n\r\n        if (error) {\r\n          logger.error('Fail retrieve server datas: %s.', error);\r\n        } else {\r\n\r\n          var replicas = 160;\r\n          if (data !== undefined && data !== null) {\r\n            replicas = data.toString('utf8');\r\n          }\r\n\r\n          self.servers[childPath] = childPath + \"^\" + replicas;\r\n\r\n          if (self.serverArray.indexOf(childPath) < 0) {\r\n            self.serverArray.push(childPath);\r\n          }\r\n\r\n          if (cb) {\r\n            cb();\r\n          } else {\r\n            self.nodeRing = new ConsistentHashing(self.servers);\r\n            \r\n          }\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  _getConfigNode = function (key, cb) {\r\n    var self = this;\r\n    var path = constants.BASE_ZNODE_PATH + constants.CONFIG_PATH + '/' + key;\r\n  \r\n    var _w = function (event) {\r\n      \r\n      if (event.type == 3) {\r\n        self._getConfigNode(key, cb);\r\n      }\r\n    };\r\n  \r\n    self.zkClient.getData(path,\r\n      _w,\r\n      function (error, data, stat) {\r\n  \r\n        if (error) {\r\n  \r\n          if (error.name == \"NO_NODE\") {\r\n            if (cb) {\r\n              cb(configData);\r\n            }\r\n          } else {\r\n            logger.error(error);\r\n          }\r\n        }\r\n  \r\n        if (data) {\r\n  \r\n          var tmp = data.toString('utf8');\r\n          var configData = JSON.parse(tmp);\r\n  \r\n          if (cb) {\r\n            cb(configData);\r\n          }\r\n  \r\n        } else {\r\n          if (cb) {\r\n            cb();\r\n          }\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n\r\n  addServerNode(config, replicas, callback) {\r\n\r\n    var self = this;\r\n    var address = config.host;\r\n    var port =  config.port;\r\n    var serverName = config.serverName;\r\n  \r\n    this.zkClient.getChildren(\r\n      constants.BASE_ZNODE_PATH + constants.CHANNEL_SERVERS_PATH,\r\n      function (error, nodes, stats) {\r\n        if (error) {\r\n          logger.error(error.stack);\r\n          callback(error);\r\n          return;\r\n        }\r\n  \r\n        var server = address + ':' + port;\r\n        var isExisted = false;\r\n        var names = [];\r\n  \r\n        var existedPathName;\r\n  \r\n        for (var i = 0; i < nodes.length; i++) {\r\n  \r\n          var ninfo = nodes[i].split('^'); \r\n  \r\n          if (server == ninfo[1]) { \r\n            existedPathName = nodes[i];\r\n            isExisted = true;\r\n            break;\r\n          }\r\n  \r\n          if ( typeof names[inx] == 'number' ){\r\n            names.push(Number(ninfo[0])); \r\n          } else {\r\n            names.push(ninfo[0]);\r\n          }\r\n  \r\n        }\r\n  \r\n        if (!isExisted) {\r\n  \r\n          if( !serverName ){\r\n            serverName = 10;\r\n            if (names.length > 0) {\r\n              var maxBefore = 0;\r\n              for( var inx in names ){\r\n                if ( typeof names[inx] == 'number' ){\r\n                  maxBefore = names[inx] ;\r\n                }\r\n              }\r\n  \r\n              serverName = maxBefore + Math.floor(Math.random() * (20 - 10 + 1)) + 10;\r\n            }\r\n          }\r\n  \r\n          var nodePath = constants.CHANNEL_SERVERS_PATH + '/' + serverName + '^' + server;\r\n  \r\n          self._createEphemeralZnode(nodePath, replicas + \"\", (err)=>{\r\n            callback(null,nodePath)\r\n          });\r\n  \r\n        } else {\r\n          if (callback) callback(null,constants.CHANNEL_SERVERS_PATH + '/' + existedPathName);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  getServerNode(key) {\r\n    return this.nodeRing.getNode(key);\r\n  };\r\n\r\n  createEphemeralPath(path, data, callback) {\r\n    this._createEphemeralZnode(path, data, callback);\r\n  };\r\n\r\n  getConfigInfo(key, cb) {\r\n    return this._getConfigNode(key, cb);\r\n  };\r\n  \r\n\r\n}\r\n\r\n\r\n\r\nexport {NodeManager}"],"file":"node-manager.js"}