{"version":3,"sources":["../../../src/frontend/js/rtcClient.js"],"names":["initRtcPeerClient","iceServers","otherUserID","remoteVideo","callback","configuration","conn","webkitRTCPeerConnection","peerClient","peerConnection","_eventEmmiter","EventEmitter","addEventListener","event","addListener","addStream","stream","onaddstream","e","srcObject","onicecandidate","candidate","signalingSocket","send","type","NEGOTIATION_MESSAGE","CANDIDATE","toUserID","oniceconnectionstatechange","iceConnectionState","console","log","isCompletedRtcPeerClient","client"],"mappings":"aAAA,SAASA,iBAAT,CAA2BC,UAA3B,EAAsCC,WAAtC,EAAkDC,WAAlD,EAA8DC,QAA9D,EAAuE;;;AAGnE,MAAIC,aAAa,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATgB,GAApB;;AAYA,MAAIC,IAAI,GAAG,IAAIC,uBAAJ,CAA4BF,aAA5B,CAAX;;AAEA,MAAIG,UAAU,GAAC,EAACC,cAAc,EAACH,IAAhB,EAAf;;AAEAE,EAAAA,UAAU,CAACL,WAAX,GAAyBA,WAAzB;;AAEAK,EAAAA,UAAU,CAACE,aAAX,GAA2B,IAAIC,YAAJ,EAA3B;;AAEAH,EAAAA,UAAU,CAACI,gBAAX,GAA6B,UAASC,KAAT,EAAeT,QAAf,EAAwB;AACjDI,IAAAA,UAAU,CAACE,aAAX,CAAyBI,WAAzB,CAAqCD,KAArC,EAA2CT,QAA3C;AACH,GAFD;;AAIAE,EAAAA,IAAI,CAACS,SAAL,CAAeC,MAAf;;AAEAV,EAAAA,IAAI,CAACW,WAAL,GAAmB,UAAUC,CAAV,EAAa;AAC5Bf,IAAAA,WAAW,CAACgB,SAAZ,GAAwBD,CAAC,CAACF,MAA1B;AACH,GAFD;;AAIAV,EAAAA,IAAI,CAACc,cAAL,GAAsB,UAAUP,KAAV,EAAiB;AACvC,QAAIA,KAAK,CAACQ,SAAV,EAAqB;;AAEjBC,MAAAA,eAAe,CAACC,IAAhB,CAAqB;AACjBC,QAAAA,IAAI,EAAEC,mBAAmB,CAACC,SADT;AAEjBL,QAAAA,SAAS,EAAER,KAAK,CAACQ,SAFA;AAGjBM,QAAAA,QAAQ,EAAEzB,WAHO,EAArB;;;AAMH,KAAC,CATF;;AAWAI,EAAAA,IAAI,CAACsB,0BAAL,GAAkC,UAASf,KAAT,EAAe;AAC7C,YAAOP,IAAI,CAACuB,kBAAZ;AACI,WAAK,WAAL;;AAEIC,QAAAA,OAAO,CAACC,GAAR,CAAY7B,WAAZ,EAAwB,4BAAxB;;AAEA;AACA;;AAEJ;AACA,WAAK,cAAL;;AAEI4B,QAAAA,OAAO,CAACC,GAAR,CAAY7B,WAAZ,EAAwB,+BAAxB;;AAEA;;AAEJ;AACA,WAAK,QAAL;;AAEA4B,QAAAA,OAAO,CAACC,GAAR,CAAY7B,WAAZ,EAAwB,yBAAxB;;AAEI;AACA;;AAEJ;AACA,WAAK,QAAL;;AAEI4B,QAAAA,OAAO,CAACC,GAAR,CAAY7B,WAAZ,EAAwB,yBAAxB;;AAEJ,cA5BJ;;AA8BH,GA/BD;;AAiCA,SAAOE,QAAQ,CAAC,IAAD,EAAMI,UAAN,CAAf;;AAEH;;AAED,SAASwB,wBAAT,CAAkCC,MAAlC,EAAyC;;AAErC,MAAGA,MAAM,CAACxB,cAAP,CAAsBoB,kBAAtB,KAA4C,WAA/C,EAA2D;AACvD,WAAO,IAAP;AACH,GAFD,MAEK;AACD,WAAO,KAAP;AACH;;AAEJ","sourcesContent":["function initRtcPeerClient(iceServers,otherUserID,remoteVideo,callback){\r\n\r\n\r\n    var configuration = {\r\n        // \"iceServers\": [\r\n        //                     // iceServers.stunServer,\r\n        //                     iceServers.turnServer\r\n        //                     // {\r\n        //                     //     url: 'turn:numb.viagenie.ca',\r\n        //                     //     \"username\":\"webrtc@live.com\",\r\n        //                     //     \"credential\":\"webrtc@live.com\"\r\n        //                     // }\r\n        //               ]\r\n                    }; \r\n\r\n    var conn = new webkitRTCPeerConnection(configuration); \r\n    \r\n    var peerClient={peerConnection:conn}\r\n    \r\n    peerClient.remoteVideo = remoteVideo\r\n\r\n    peerClient._eventEmmiter = new EventEmitter();\r\n    \r\n    peerClient.addEventListener =function(event,callback){\r\n        peerClient._eventEmmiter.addListener(event,callback)\r\n    }\r\n    \r\n    conn.addStream(stream); \r\n          \r\n    conn.onaddstream = function (e) { \r\n        remoteVideo.srcObject = e.stream; \r\n    };\r\n          \r\n    conn.onicecandidate = function (event) { \r\n    if (event.candidate) { \r\n        \r\n        signalingSocket.send({ \r\n            type: NEGOTIATION_MESSAGE.CANDIDATE, \r\n            candidate: event.candidate,\r\n            toUserID: otherUserID\r\n        });\r\n       \r\n    }};\r\n\r\n    conn.oniceconnectionstatechange = function(event){\r\n        switch(conn.iceConnectionState){\r\n            case \"connected\":\r\n\r\n                console.log(otherUserID,\" peerConnection connected \")\r\n\r\n                // peerClient._eventEmmiter.emit(\"connected\")\r\n                // todo eventEmit\r\n                \r\n            break;\r\n            case \"disconnected\":\r\n\r\n                console.log(otherUserID,\" peerConnection disconnected \")\r\n\r\n                // peerClient._eventEmmiter.emitemit(\"disconnected\")\r\n\r\n            break;\r\n            case \"failed\":\r\n\r\n            console.log(otherUserID,\" peerConnection failed \")\r\n\r\n                // peerClient._eventEmmiter.emitemit(\"failed\")\r\n                //to do event\r\n            \r\n            break;\r\n            case \"closed\":\r\n\r\n                console.log(otherUserID,\" peerConnection closed \")\r\n              \r\n            break;\r\n        }\r\n    }\r\n          \r\n    return callback(null,peerClient)\r\n\r\n}\r\n\r\nfunction isCompletedRtcPeerClient(client){\r\n\r\n    if(client.peerConnection.iceConnectionState ===\"completed\"){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"],"file":"rtcClient.js"}